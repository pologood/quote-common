// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SnapShotExtra.proto

package com.baidu.stock.quote.protocbuf;

public final class SnapShotExtraProto {
  private SnapShotExtraProto() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
  }
  public interface SnapShotExtraOrBuilder extends
      // @@protoc_insertion_point(interface_extends:com.baidu.stock.quote.protocbuf.SnapShotExtra)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>optional float amplitudeRatio = 1;</code>
     *
     * <pre>
     * 振幅
     * </pre>
     */
    boolean hasAmplitudeRatio();
    /**
     * <code>optional float amplitudeRatio = 1;</code>
     *
     * <pre>
     * 振幅
     * </pre>
     */
    float getAmplitudeRatio();

    /**
     * <code>optional float turnoverRatio = 2;</code>
     *
     * <pre>
     * 换手率
     * </pre>
     */
    boolean hasTurnoverRatio();
    /**
     * <code>optional float turnoverRatio = 2;</code>
     *
     * <pre>
     * 换手率
     * </pre>
     */
    float getTurnoverRatio();

    /**
     * <code>optional double currencyValue = 3;</code>
     *
     * <pre>
     * 流通市值
     * </pre>
     */
    boolean hasCurrencyValue();
    /**
     * <code>optional double currencyValue = 3;</code>
     *
     * <pre>
     * 流通市值
     * </pre>
     */
    double getCurrencyValue();

    /**
     * <code>optional double capitalization = 4;</code>
     *
     * <pre>
     * 总市值
     * </pre>
     */
    boolean hasCapitalization();
    /**
     * <code>optional double capitalization = 4;</code>
     *
     * <pre>
     * 总市值
     * </pre>
     */
    double getCapitalization();

    /**
     * <code>optional int32 dealCount = 5;</code>
     *
     * <pre>
     * 成交笔数
     * </pre>
     */
    boolean hasDealCount();
    /**
     * <code>optional int32 dealCount = 5;</code>
     *
     * <pre>
     * 成交笔数
     * </pre>
     */
    int getDealCount();

    /**
     * <code>optional float volumeRatio = 6;</code>
     *
     * <pre>
     * 量比
     * </pre>
     */
    boolean hasVolumeRatio();
    /**
     * <code>optional float volumeRatio = 6;</code>
     *
     * <pre>
     * 量比
     * </pre>
     */
    float getVolumeRatio();

    /**
     * <code>optional float weibiRatio = 7;</code>
     *
     * <pre>
     * 委比
     * </pre>
     */
    boolean hasWeibiRatio();
    /**
     * <code>optional float weibiRatio = 7;</code>
     *
     * <pre>
     * 委比
     * </pre>
     */
    float getWeibiRatio();

    /**
     * <code>optional float bvRatio = 8;</code>
     *
     * <pre>
     * 市净率
     * </pre>
     */
    boolean hasBvRatio();
    /**
     * <code>optional float bvRatio = 8;</code>
     *
     * <pre>
     * 市净率
     * </pre>
     */
    float getBvRatio();

    /**
     * <code>optional float psRatio = 9;</code>
     *
     * <pre>
     * 市销率
     * </pre>
     */
    boolean hasPsRatio();
    /**
     * <code>optional float psRatio = 9;</code>
     *
     * <pre>
     * 市销率
     * </pre>
     */
    float getPsRatio();

    /**
     * <code>optional int64 nowVol = 10;</code>
     *
     * <pre>
     * 现量 (当前交易的成交量, 单位: 股)
     * </pre>
     */
    boolean hasNowVol();
    /**
     * <code>optional int64 nowVol = 10;</code>
     *
     * <pre>
     * 现量 (当前交易的成交量, 单位: 股)
     * </pre>
     */
    long getNowVol();

    /**
     * <code>optional int32 inside = 11;</code>
     *
     * <pre>
     * 内盘
     * </pre>
     */
    boolean hasInside();
    /**
     * <code>optional int32 inside = 11;</code>
     *
     * <pre>
     * 内盘
     * </pre>
     */
    int getInside();

    /**
     * <code>optional int32 outside = 12;</code>
     *
     * <pre>
     * 外盘
     * </pre>
     */
    boolean hasOutside();
    /**
     * <code>optional int32 outside = 12;</code>
     *
     * <pre>
     * 外盘
     * </pre>
     */
    int getOutside();

    /**
     * <code>optional int32 ccl = 13;</code>
     *
     * <pre>
     * 持仓量
     * </pre>
     */
    boolean hasCcl();
    /**
     * <code>optional int32 ccl = 13;</code>
     *
     * <pre>
     * 持仓量
     * </pre>
     */
    int getCcl();

    /**
     * <code>optional int32 riseNum = 14;</code>
     *
     * <pre>
     * 涨家数
     * </pre>
     */
    boolean hasRiseNum();
    /**
     * <code>optional int32 riseNum = 14;</code>
     *
     * <pre>
     * 涨家数
     * </pre>
     */
    int getRiseNum();

    /**
     * <code>optional int32 fairNum = 15;</code>
     *
     * <pre>
     * 平家数
     * </pre>
     */
    boolean hasFairNum();
    /**
     * <code>optional int32 fairNum = 15;</code>
     *
     * <pre>
     * 平家数
     * </pre>
     */
    int getFairNum();

    /**
     * <code>optional int32 fallNum = 16;</code>
     *
     * <pre>
     * 跌家数
     * </pre>
     */
    boolean hasFallNum();
    /**
     * <code>optional int32 fallNum = 16;</code>
     *
     * <pre>
     * 跌家数
     * </pre>
     */
    int getFallNum();

    /**
     * <code>optional float weekHigh = 17;</code>
     *
     * <pre>
     * 52周高
     * </pre>
     */
    boolean hasWeekHigh();
    /**
     * <code>optional float weekHigh = 17;</code>
     *
     * <pre>
     * 52周高
     * </pre>
     */
    float getWeekHigh();

    /**
     * <code>optional float weekLow = 18;</code>
     *
     * <pre>
     * 52周低
     * </pre>
     */
    boolean hasWeekLow();
    /**
     * <code>optional float weekLow = 18;</code>
     *
     * <pre>
     * 52周低
     * </pre>
     */
    float getWeekLow();

    /**
     * <code>optional float lyrPeratio = 19;</code>
     *
     * <pre>
     * LYR市盈率
     * </pre>
     */
    boolean hasLyrPeratio();
    /**
     * <code>optional float lyrPeratio = 19;</code>
     *
     * <pre>
     * LYR市盈率
     * </pre>
     */
    float getLyrPeratio();

    /**
     * <code>optional float mrqPeratio = 20;</code>
     *
     * <pre>
     * mrq市盈率
     * </pre>
     */
    boolean hasMrqPeratio();
    /**
     * <code>optional float mrqPeratio = 20;</code>
     *
     * <pre>
     * mrq市盈率
     * </pre>
     */
    float getMrqPeratio();

    /**
     * <code>optional float ttmPeratio = 21;</code>
     *
     * <pre>
     * TTM市盈率
     * </pre>
     */
    boolean hasTtmPeratio();
    /**
     * <code>optional float ttmPeratio = 21;</code>
     *
     * <pre>
     * TTM市盈率
     * </pre>
     */
    float getTtmPeratio();

    /**
     * <code>optional double netFundsFlow = 22;</code>
     *
     * <pre>
     *主力资金净流入
     * </pre>
     */
    boolean hasNetFundsFlow();
    /**
     * <code>optional double netFundsFlow = 22;</code>
     *
     * <pre>
     *主力资金净流入
     * </pre>
     */
    double getNetFundsFlow();

    /**
     * <code>optional float perShareEarn = 23;</code>
     *
     * <pre>
     *每股收益
     * </pre>
     */
    boolean hasPerShareEarn();
    /**
     * <code>optional float perShareEarn = 23;</code>
     *
     * <pre>
     *每股收益
     * </pre>
     */
    float getPerShareEarn();

    /**
     * <code>optional float netAssetsPerShare = 24;</code>
     *
     * <pre>
     *每股净资产
     * </pre>
     */
    boolean hasNetAssetsPerShare();
    /**
     * <code>optional float netAssetsPerShare = 24;</code>
     *
     * <pre>
     *每股净资产
     * </pre>
     */
    float getNetAssetsPerShare();

    /**
     * <code>optional int64 totalShareCapital = 25;</code>
     *
     * <pre>
     *总股本
     * </pre>
     */
    boolean hasTotalShareCapital();
    /**
     * <code>optional int64 totalShareCapital = 25;</code>
     *
     * <pre>
     *总股本
     * </pre>
     */
    long getTotalShareCapital();

    /**
     * <code>optional int64 circulatingCapital = 26;</code>
     *
     * <pre>
     *流通股本
     * </pre>
     */
    boolean hasCirculatingCapital();
    /**
     * <code>optional int64 circulatingCapital = 26;</code>
     *
     * <pre>
     *流通股本
     * </pre>
     */
    long getCirculatingCapital();
  }
  /**
   * Protobuf type {@code com.baidu.stock.quote.protocbuf.SnapShotExtra}
   */
  public static final class SnapShotExtra extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:com.baidu.stock.quote.protocbuf.SnapShotExtra)
      SnapShotExtraOrBuilder {
    // Use SnapShotExtra.newBuilder() to construct.
    private SnapShotExtra(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private SnapShotExtra(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final SnapShotExtra defaultInstance;
    public static SnapShotExtra getDefaultInstance() {
      return defaultInstance;
    }

    public SnapShotExtra getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private SnapShotExtra(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 13: {
              bitField0_ |= 0x00000001;
              amplitudeRatio_ = input.readFloat();
              break;
            }
            case 21: {
              bitField0_ |= 0x00000002;
              turnoverRatio_ = input.readFloat();
              break;
            }
            case 25: {
              bitField0_ |= 0x00000004;
              currencyValue_ = input.readDouble();
              break;
            }
            case 33: {
              bitField0_ |= 0x00000008;
              capitalization_ = input.readDouble();
              break;
            }
            case 40: {
              bitField0_ |= 0x00000010;
              dealCount_ = input.readInt32();
              break;
            }
            case 53: {
              bitField0_ |= 0x00000020;
              volumeRatio_ = input.readFloat();
              break;
            }
            case 61: {
              bitField0_ |= 0x00000040;
              weibiRatio_ = input.readFloat();
              break;
            }
            case 69: {
              bitField0_ |= 0x00000080;
              bvRatio_ = input.readFloat();
              break;
            }
            case 77: {
              bitField0_ |= 0x00000100;
              psRatio_ = input.readFloat();
              break;
            }
            case 80: {
              bitField0_ |= 0x00000200;
              nowVol_ = input.readInt64();
              break;
            }
            case 88: {
              bitField0_ |= 0x00000400;
              inside_ = input.readInt32();
              break;
            }
            case 96: {
              bitField0_ |= 0x00000800;
              outside_ = input.readInt32();
              break;
            }
            case 104: {
              bitField0_ |= 0x00001000;
              ccl_ = input.readInt32();
              break;
            }
            case 112: {
              bitField0_ |= 0x00002000;
              riseNum_ = input.readInt32();
              break;
            }
            case 120: {
              bitField0_ |= 0x00004000;
              fairNum_ = input.readInt32();
              break;
            }
            case 128: {
              bitField0_ |= 0x00008000;
              fallNum_ = input.readInt32();
              break;
            }
            case 141: {
              bitField0_ |= 0x00010000;
              weekHigh_ = input.readFloat();
              break;
            }
            case 149: {
              bitField0_ |= 0x00020000;
              weekLow_ = input.readFloat();
              break;
            }
            case 157: {
              bitField0_ |= 0x00040000;
              lyrPeratio_ = input.readFloat();
              break;
            }
            case 165: {
              bitField0_ |= 0x00080000;
              mrqPeratio_ = input.readFloat();
              break;
            }
            case 173: {
              bitField0_ |= 0x00100000;
              ttmPeratio_ = input.readFloat();
              break;
            }
            case 177: {
              bitField0_ |= 0x00200000;
              netFundsFlow_ = input.readDouble();
              break;
            }
            case 189: {
              bitField0_ |= 0x00400000;
              perShareEarn_ = input.readFloat();
              break;
            }
            case 197: {
              bitField0_ |= 0x00800000;
              netAssetsPerShare_ = input.readFloat();
              break;
            }
            case 200: {
              bitField0_ |= 0x01000000;
              totalShareCapital_ = input.readInt64();
              break;
            }
            case 208: {
              bitField0_ |= 0x02000000;
              circulatingCapital_ = input.readInt64();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.baidu.stock.quote.protocbuf.SnapShotExtraProto.internal_static_com_baidu_stock_quote_protocbuf_SnapShotExtra_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.baidu.stock.quote.protocbuf.SnapShotExtraProto.internal_static_com_baidu_stock_quote_protocbuf_SnapShotExtra_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.baidu.stock.quote.protocbuf.SnapShotExtraProto.SnapShotExtra.class, com.baidu.stock.quote.protocbuf.SnapShotExtraProto.SnapShotExtra.Builder.class);
    }

    public static com.google.protobuf.Parser<SnapShotExtra> PARSER =
        new com.google.protobuf.AbstractParser<SnapShotExtra>() {
      public SnapShotExtra parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new SnapShotExtra(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<SnapShotExtra> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int AMPLITUDERATIO_FIELD_NUMBER = 1;
    private float amplitudeRatio_;
    /**
     * <code>optional float amplitudeRatio = 1;</code>
     *
     * <pre>
     * 振幅
     * </pre>
     */
    public boolean hasAmplitudeRatio() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional float amplitudeRatio = 1;</code>
     *
     * <pre>
     * 振幅
     * </pre>
     */
    public float getAmplitudeRatio() {
      return amplitudeRatio_;
    }

    public static final int TURNOVERRATIO_FIELD_NUMBER = 2;
    private float turnoverRatio_;
    /**
     * <code>optional float turnoverRatio = 2;</code>
     *
     * <pre>
     * 换手率
     * </pre>
     */
    public boolean hasTurnoverRatio() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional float turnoverRatio = 2;</code>
     *
     * <pre>
     * 换手率
     * </pre>
     */
    public float getTurnoverRatio() {
      return turnoverRatio_;
    }

    public static final int CURRENCYVALUE_FIELD_NUMBER = 3;
    private double currencyValue_;
    /**
     * <code>optional double currencyValue = 3;</code>
     *
     * <pre>
     * 流通市值
     * </pre>
     */
    public boolean hasCurrencyValue() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional double currencyValue = 3;</code>
     *
     * <pre>
     * 流通市值
     * </pre>
     */
    public double getCurrencyValue() {
      return currencyValue_;
    }

    public static final int CAPITALIZATION_FIELD_NUMBER = 4;
    private double capitalization_;
    /**
     * <code>optional double capitalization = 4;</code>
     *
     * <pre>
     * 总市值
     * </pre>
     */
    public boolean hasCapitalization() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional double capitalization = 4;</code>
     *
     * <pre>
     * 总市值
     * </pre>
     */
    public double getCapitalization() {
      return capitalization_;
    }

    public static final int DEALCOUNT_FIELD_NUMBER = 5;
    private int dealCount_;
    /**
     * <code>optional int32 dealCount = 5;</code>
     *
     * <pre>
     * 成交笔数
     * </pre>
     */
    public boolean hasDealCount() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional int32 dealCount = 5;</code>
     *
     * <pre>
     * 成交笔数
     * </pre>
     */
    public int getDealCount() {
      return dealCount_;
    }

    public static final int VOLUMERATIO_FIELD_NUMBER = 6;
    private float volumeRatio_;
    /**
     * <code>optional float volumeRatio = 6;</code>
     *
     * <pre>
     * 量比
     * </pre>
     */
    public boolean hasVolumeRatio() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional float volumeRatio = 6;</code>
     *
     * <pre>
     * 量比
     * </pre>
     */
    public float getVolumeRatio() {
      return volumeRatio_;
    }

    public static final int WEIBIRATIO_FIELD_NUMBER = 7;
    private float weibiRatio_;
    /**
     * <code>optional float weibiRatio = 7;</code>
     *
     * <pre>
     * 委比
     * </pre>
     */
    public boolean hasWeibiRatio() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional float weibiRatio = 7;</code>
     *
     * <pre>
     * 委比
     * </pre>
     */
    public float getWeibiRatio() {
      return weibiRatio_;
    }

    public static final int BVRATIO_FIELD_NUMBER = 8;
    private float bvRatio_;
    /**
     * <code>optional float bvRatio = 8;</code>
     *
     * <pre>
     * 市净率
     * </pre>
     */
    public boolean hasBvRatio() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>optional float bvRatio = 8;</code>
     *
     * <pre>
     * 市净率
     * </pre>
     */
    public float getBvRatio() {
      return bvRatio_;
    }

    public static final int PSRATIO_FIELD_NUMBER = 9;
    private float psRatio_;
    /**
     * <code>optional float psRatio = 9;</code>
     *
     * <pre>
     * 市销率
     * </pre>
     */
    public boolean hasPsRatio() {
      return ((bitField0_ & 0x00000100) == 0x00000100);
    }
    /**
     * <code>optional float psRatio = 9;</code>
     *
     * <pre>
     * 市销率
     * </pre>
     */
    public float getPsRatio() {
      return psRatio_;
    }

    public static final int NOWVOL_FIELD_NUMBER = 10;
    private long nowVol_;
    /**
     * <code>optional int64 nowVol = 10;</code>
     *
     * <pre>
     * 现量 (当前交易的成交量, 单位: 股)
     * </pre>
     */
    public boolean hasNowVol() {
      return ((bitField0_ & 0x00000200) == 0x00000200);
    }
    /**
     * <code>optional int64 nowVol = 10;</code>
     *
     * <pre>
     * 现量 (当前交易的成交量, 单位: 股)
     * </pre>
     */
    public long getNowVol() {
      return nowVol_;
    }

    public static final int INSIDE_FIELD_NUMBER = 11;
    private int inside_;
    /**
     * <code>optional int32 inside = 11;</code>
     *
     * <pre>
     * 内盘
     * </pre>
     */
    public boolean hasInside() {
      return ((bitField0_ & 0x00000400) == 0x00000400);
    }
    /**
     * <code>optional int32 inside = 11;</code>
     *
     * <pre>
     * 内盘
     * </pre>
     */
    public int getInside() {
      return inside_;
    }

    public static final int OUTSIDE_FIELD_NUMBER = 12;
    private int outside_;
    /**
     * <code>optional int32 outside = 12;</code>
     *
     * <pre>
     * 外盘
     * </pre>
     */
    public boolean hasOutside() {
      return ((bitField0_ & 0x00000800) == 0x00000800);
    }
    /**
     * <code>optional int32 outside = 12;</code>
     *
     * <pre>
     * 外盘
     * </pre>
     */
    public int getOutside() {
      return outside_;
    }

    public static final int CCL_FIELD_NUMBER = 13;
    private int ccl_;
    /**
     * <code>optional int32 ccl = 13;</code>
     *
     * <pre>
     * 持仓量
     * </pre>
     */
    public boolean hasCcl() {
      return ((bitField0_ & 0x00001000) == 0x00001000);
    }
    /**
     * <code>optional int32 ccl = 13;</code>
     *
     * <pre>
     * 持仓量
     * </pre>
     */
    public int getCcl() {
      return ccl_;
    }

    public static final int RISENUM_FIELD_NUMBER = 14;
    private int riseNum_;
    /**
     * <code>optional int32 riseNum = 14;</code>
     *
     * <pre>
     * 涨家数
     * </pre>
     */
    public boolean hasRiseNum() {
      return ((bitField0_ & 0x00002000) == 0x00002000);
    }
    /**
     * <code>optional int32 riseNum = 14;</code>
     *
     * <pre>
     * 涨家数
     * </pre>
     */
    public int getRiseNum() {
      return riseNum_;
    }

    public static final int FAIRNUM_FIELD_NUMBER = 15;
    private int fairNum_;
    /**
     * <code>optional int32 fairNum = 15;</code>
     *
     * <pre>
     * 平家数
     * </pre>
     */
    public boolean hasFairNum() {
      return ((bitField0_ & 0x00004000) == 0x00004000);
    }
    /**
     * <code>optional int32 fairNum = 15;</code>
     *
     * <pre>
     * 平家数
     * </pre>
     */
    public int getFairNum() {
      return fairNum_;
    }

    public static final int FALLNUM_FIELD_NUMBER = 16;
    private int fallNum_;
    /**
     * <code>optional int32 fallNum = 16;</code>
     *
     * <pre>
     * 跌家数
     * </pre>
     */
    public boolean hasFallNum() {
      return ((bitField0_ & 0x00008000) == 0x00008000);
    }
    /**
     * <code>optional int32 fallNum = 16;</code>
     *
     * <pre>
     * 跌家数
     * </pre>
     */
    public int getFallNum() {
      return fallNum_;
    }

    public static final int WEEKHIGH_FIELD_NUMBER = 17;
    private float weekHigh_;
    /**
     * <code>optional float weekHigh = 17;</code>
     *
     * <pre>
     * 52周高
     * </pre>
     */
    public boolean hasWeekHigh() {
      return ((bitField0_ & 0x00010000) == 0x00010000);
    }
    /**
     * <code>optional float weekHigh = 17;</code>
     *
     * <pre>
     * 52周高
     * </pre>
     */
    public float getWeekHigh() {
      return weekHigh_;
    }

    public static final int WEEKLOW_FIELD_NUMBER = 18;
    private float weekLow_;
    /**
     * <code>optional float weekLow = 18;</code>
     *
     * <pre>
     * 52周低
     * </pre>
     */
    public boolean hasWeekLow() {
      return ((bitField0_ & 0x00020000) == 0x00020000);
    }
    /**
     * <code>optional float weekLow = 18;</code>
     *
     * <pre>
     * 52周低
     * </pre>
     */
    public float getWeekLow() {
      return weekLow_;
    }

    public static final int LYRPERATIO_FIELD_NUMBER = 19;
    private float lyrPeratio_;
    /**
     * <code>optional float lyrPeratio = 19;</code>
     *
     * <pre>
     * LYR市盈率
     * </pre>
     */
    public boolean hasLyrPeratio() {
      return ((bitField0_ & 0x00040000) == 0x00040000);
    }
    /**
     * <code>optional float lyrPeratio = 19;</code>
     *
     * <pre>
     * LYR市盈率
     * </pre>
     */
    public float getLyrPeratio() {
      return lyrPeratio_;
    }

    public static final int MRQPERATIO_FIELD_NUMBER = 20;
    private float mrqPeratio_;
    /**
     * <code>optional float mrqPeratio = 20;</code>
     *
     * <pre>
     * mrq市盈率
     * </pre>
     */
    public boolean hasMrqPeratio() {
      return ((bitField0_ & 0x00080000) == 0x00080000);
    }
    /**
     * <code>optional float mrqPeratio = 20;</code>
     *
     * <pre>
     * mrq市盈率
     * </pre>
     */
    public float getMrqPeratio() {
      return mrqPeratio_;
    }

    public static final int TTMPERATIO_FIELD_NUMBER = 21;
    private float ttmPeratio_;
    /**
     * <code>optional float ttmPeratio = 21;</code>
     *
     * <pre>
     * TTM市盈率
     * </pre>
     */
    public boolean hasTtmPeratio() {
      return ((bitField0_ & 0x00100000) == 0x00100000);
    }
    /**
     * <code>optional float ttmPeratio = 21;</code>
     *
     * <pre>
     * TTM市盈率
     * </pre>
     */
    public float getTtmPeratio() {
      return ttmPeratio_;
    }

    public static final int NETFUNDSFLOW_FIELD_NUMBER = 22;
    private double netFundsFlow_;
    /**
     * <code>optional double netFundsFlow = 22;</code>
     *
     * <pre>
     *主力资金净流入
     * </pre>
     */
    public boolean hasNetFundsFlow() {
      return ((bitField0_ & 0x00200000) == 0x00200000);
    }
    /**
     * <code>optional double netFundsFlow = 22;</code>
     *
     * <pre>
     *主力资金净流入
     * </pre>
     */
    public double getNetFundsFlow() {
      return netFundsFlow_;
    }

    public static final int PERSHAREEARN_FIELD_NUMBER = 23;
    private float perShareEarn_;
    /**
     * <code>optional float perShareEarn = 23;</code>
     *
     * <pre>
     *每股收益
     * </pre>
     */
    public boolean hasPerShareEarn() {
      return ((bitField0_ & 0x00400000) == 0x00400000);
    }
    /**
     * <code>optional float perShareEarn = 23;</code>
     *
     * <pre>
     *每股收益
     * </pre>
     */
    public float getPerShareEarn() {
      return perShareEarn_;
    }

    public static final int NETASSETSPERSHARE_FIELD_NUMBER = 24;
    private float netAssetsPerShare_;
    /**
     * <code>optional float netAssetsPerShare = 24;</code>
     *
     * <pre>
     *每股净资产
     * </pre>
     */
    public boolean hasNetAssetsPerShare() {
      return ((bitField0_ & 0x00800000) == 0x00800000);
    }
    /**
     * <code>optional float netAssetsPerShare = 24;</code>
     *
     * <pre>
     *每股净资产
     * </pre>
     */
    public float getNetAssetsPerShare() {
      return netAssetsPerShare_;
    }

    public static final int TOTALSHARECAPITAL_FIELD_NUMBER = 25;
    private long totalShareCapital_;
    /**
     * <code>optional int64 totalShareCapital = 25;</code>
     *
     * <pre>
     *总股本
     * </pre>
     */
    public boolean hasTotalShareCapital() {
      return ((bitField0_ & 0x01000000) == 0x01000000);
    }
    /**
     * <code>optional int64 totalShareCapital = 25;</code>
     *
     * <pre>
     *总股本
     * </pre>
     */
    public long getTotalShareCapital() {
      return totalShareCapital_;
    }

    public static final int CIRCULATINGCAPITAL_FIELD_NUMBER = 26;
    private long circulatingCapital_;
    /**
     * <code>optional int64 circulatingCapital = 26;</code>
     *
     * <pre>
     *流通股本
     * </pre>
     */
    public boolean hasCirculatingCapital() {
      return ((bitField0_ & 0x02000000) == 0x02000000);
    }
    /**
     * <code>optional int64 circulatingCapital = 26;</code>
     *
     * <pre>
     *流通股本
     * </pre>
     */
    public long getCirculatingCapital() {
      return circulatingCapital_;
    }

    private void initFields() {
      amplitudeRatio_ = 0F;
      turnoverRatio_ = 0F;
      currencyValue_ = 0D;
      capitalization_ = 0D;
      dealCount_ = 0;
      volumeRatio_ = 0F;
      weibiRatio_ = 0F;
      bvRatio_ = 0F;
      psRatio_ = 0F;
      nowVol_ = 0L;
      inside_ = 0;
      outside_ = 0;
      ccl_ = 0;
      riseNum_ = 0;
      fairNum_ = 0;
      fallNum_ = 0;
      weekHigh_ = 0F;
      weekLow_ = 0F;
      lyrPeratio_ = 0F;
      mrqPeratio_ = 0F;
      ttmPeratio_ = 0F;
      netFundsFlow_ = 0D;
      perShareEarn_ = 0F;
      netAssetsPerShare_ = 0F;
      totalShareCapital_ = 0L;
      circulatingCapital_ = 0L;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeFloat(1, amplitudeRatio_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeFloat(2, turnoverRatio_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeDouble(3, currencyValue_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeDouble(4, capitalization_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeInt32(5, dealCount_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeFloat(6, volumeRatio_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeFloat(7, weibiRatio_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeFloat(8, bvRatio_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        output.writeFloat(9, psRatio_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        output.writeInt64(10, nowVol_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        output.writeInt32(11, inside_);
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        output.writeInt32(12, outside_);
      }
      if (((bitField0_ & 0x00001000) == 0x00001000)) {
        output.writeInt32(13, ccl_);
      }
      if (((bitField0_ & 0x00002000) == 0x00002000)) {
        output.writeInt32(14, riseNum_);
      }
      if (((bitField0_ & 0x00004000) == 0x00004000)) {
        output.writeInt32(15, fairNum_);
      }
      if (((bitField0_ & 0x00008000) == 0x00008000)) {
        output.writeInt32(16, fallNum_);
      }
      if (((bitField0_ & 0x00010000) == 0x00010000)) {
        output.writeFloat(17, weekHigh_);
      }
      if (((bitField0_ & 0x00020000) == 0x00020000)) {
        output.writeFloat(18, weekLow_);
      }
      if (((bitField0_ & 0x00040000) == 0x00040000)) {
        output.writeFloat(19, lyrPeratio_);
      }
      if (((bitField0_ & 0x00080000) == 0x00080000)) {
        output.writeFloat(20, mrqPeratio_);
      }
      if (((bitField0_ & 0x00100000) == 0x00100000)) {
        output.writeFloat(21, ttmPeratio_);
      }
      if (((bitField0_ & 0x00200000) == 0x00200000)) {
        output.writeDouble(22, netFundsFlow_);
      }
      if (((bitField0_ & 0x00400000) == 0x00400000)) {
        output.writeFloat(23, perShareEarn_);
      }
      if (((bitField0_ & 0x00800000) == 0x00800000)) {
        output.writeFloat(24, netAssetsPerShare_);
      }
      if (((bitField0_ & 0x01000000) == 0x01000000)) {
        output.writeInt64(25, totalShareCapital_);
      }
      if (((bitField0_ & 0x02000000) == 0x02000000)) {
        output.writeInt64(26, circulatingCapital_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(1, amplitudeRatio_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(2, turnoverRatio_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(3, currencyValue_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(4, capitalization_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(5, dealCount_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(6, volumeRatio_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(7, weibiRatio_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(8, bvRatio_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(9, psRatio_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(10, nowVol_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(11, inside_);
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(12, outside_);
      }
      if (((bitField0_ & 0x00001000) == 0x00001000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(13, ccl_);
      }
      if (((bitField0_ & 0x00002000) == 0x00002000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(14, riseNum_);
      }
      if (((bitField0_ & 0x00004000) == 0x00004000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(15, fairNum_);
      }
      if (((bitField0_ & 0x00008000) == 0x00008000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(16, fallNum_);
      }
      if (((bitField0_ & 0x00010000) == 0x00010000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(17, weekHigh_);
      }
      if (((bitField0_ & 0x00020000) == 0x00020000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(18, weekLow_);
      }
      if (((bitField0_ & 0x00040000) == 0x00040000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(19, lyrPeratio_);
      }
      if (((bitField0_ & 0x00080000) == 0x00080000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(20, mrqPeratio_);
      }
      if (((bitField0_ & 0x00100000) == 0x00100000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(21, ttmPeratio_);
      }
      if (((bitField0_ & 0x00200000) == 0x00200000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(22, netFundsFlow_);
      }
      if (((bitField0_ & 0x00400000) == 0x00400000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(23, perShareEarn_);
      }
      if (((bitField0_ & 0x00800000) == 0x00800000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(24, netAssetsPerShare_);
      }
      if (((bitField0_ & 0x01000000) == 0x01000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(25, totalShareCapital_);
      }
      if (((bitField0_ & 0x02000000) == 0x02000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(26, circulatingCapital_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.baidu.stock.quote.protocbuf.SnapShotExtraProto.SnapShotExtra parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.baidu.stock.quote.protocbuf.SnapShotExtraProto.SnapShotExtra parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.baidu.stock.quote.protocbuf.SnapShotExtraProto.SnapShotExtra parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.baidu.stock.quote.protocbuf.SnapShotExtraProto.SnapShotExtra parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.baidu.stock.quote.protocbuf.SnapShotExtraProto.SnapShotExtra parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.baidu.stock.quote.protocbuf.SnapShotExtraProto.SnapShotExtra parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.baidu.stock.quote.protocbuf.SnapShotExtraProto.SnapShotExtra parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.baidu.stock.quote.protocbuf.SnapShotExtraProto.SnapShotExtra parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.baidu.stock.quote.protocbuf.SnapShotExtraProto.SnapShotExtra parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.baidu.stock.quote.protocbuf.SnapShotExtraProto.SnapShotExtra parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.baidu.stock.quote.protocbuf.SnapShotExtraProto.SnapShotExtra prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code com.baidu.stock.quote.protocbuf.SnapShotExtra}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:com.baidu.stock.quote.protocbuf.SnapShotExtra)
        com.baidu.stock.quote.protocbuf.SnapShotExtraProto.SnapShotExtraOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.baidu.stock.quote.protocbuf.SnapShotExtraProto.internal_static_com_baidu_stock_quote_protocbuf_SnapShotExtra_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.baidu.stock.quote.protocbuf.SnapShotExtraProto.internal_static_com_baidu_stock_quote_protocbuf_SnapShotExtra_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.baidu.stock.quote.protocbuf.SnapShotExtraProto.SnapShotExtra.class, com.baidu.stock.quote.protocbuf.SnapShotExtraProto.SnapShotExtra.Builder.class);
      }

      // Construct using com.baidu.stock.quote.protocbuf.SnapShotExtraProto.SnapShotExtra.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        amplitudeRatio_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000001);
        turnoverRatio_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000002);
        currencyValue_ = 0D;
        bitField0_ = (bitField0_ & ~0x00000004);
        capitalization_ = 0D;
        bitField0_ = (bitField0_ & ~0x00000008);
        dealCount_ = 0;
        bitField0_ = (bitField0_ & ~0x00000010);
        volumeRatio_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000020);
        weibiRatio_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000040);
        bvRatio_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000080);
        psRatio_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000100);
        nowVol_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000200);
        inside_ = 0;
        bitField0_ = (bitField0_ & ~0x00000400);
        outside_ = 0;
        bitField0_ = (bitField0_ & ~0x00000800);
        ccl_ = 0;
        bitField0_ = (bitField0_ & ~0x00001000);
        riseNum_ = 0;
        bitField0_ = (bitField0_ & ~0x00002000);
        fairNum_ = 0;
        bitField0_ = (bitField0_ & ~0x00004000);
        fallNum_ = 0;
        bitField0_ = (bitField0_ & ~0x00008000);
        weekHigh_ = 0F;
        bitField0_ = (bitField0_ & ~0x00010000);
        weekLow_ = 0F;
        bitField0_ = (bitField0_ & ~0x00020000);
        lyrPeratio_ = 0F;
        bitField0_ = (bitField0_ & ~0x00040000);
        mrqPeratio_ = 0F;
        bitField0_ = (bitField0_ & ~0x00080000);
        ttmPeratio_ = 0F;
        bitField0_ = (bitField0_ & ~0x00100000);
        netFundsFlow_ = 0D;
        bitField0_ = (bitField0_ & ~0x00200000);
        perShareEarn_ = 0F;
        bitField0_ = (bitField0_ & ~0x00400000);
        netAssetsPerShare_ = 0F;
        bitField0_ = (bitField0_ & ~0x00800000);
        totalShareCapital_ = 0L;
        bitField0_ = (bitField0_ & ~0x01000000);
        circulatingCapital_ = 0L;
        bitField0_ = (bitField0_ & ~0x02000000);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.baidu.stock.quote.protocbuf.SnapShotExtraProto.internal_static_com_baidu_stock_quote_protocbuf_SnapShotExtra_descriptor;
      }

      public com.baidu.stock.quote.protocbuf.SnapShotExtraProto.SnapShotExtra getDefaultInstanceForType() {
        return com.baidu.stock.quote.protocbuf.SnapShotExtraProto.SnapShotExtra.getDefaultInstance();
      }

      public com.baidu.stock.quote.protocbuf.SnapShotExtraProto.SnapShotExtra build() {
        com.baidu.stock.quote.protocbuf.SnapShotExtraProto.SnapShotExtra result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.baidu.stock.quote.protocbuf.SnapShotExtraProto.SnapShotExtra buildPartial() {
        com.baidu.stock.quote.protocbuf.SnapShotExtraProto.SnapShotExtra result = new com.baidu.stock.quote.protocbuf.SnapShotExtraProto.SnapShotExtra(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.amplitudeRatio_ = amplitudeRatio_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.turnoverRatio_ = turnoverRatio_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.currencyValue_ = currencyValue_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.capitalization_ = capitalization_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.dealCount_ = dealCount_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        result.volumeRatio_ = volumeRatio_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000040;
        }
        result.weibiRatio_ = weibiRatio_;
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000080;
        }
        result.bvRatio_ = bvRatio_;
        if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
          to_bitField0_ |= 0x00000100;
        }
        result.psRatio_ = psRatio_;
        if (((from_bitField0_ & 0x00000200) == 0x00000200)) {
          to_bitField0_ |= 0x00000200;
        }
        result.nowVol_ = nowVol_;
        if (((from_bitField0_ & 0x00000400) == 0x00000400)) {
          to_bitField0_ |= 0x00000400;
        }
        result.inside_ = inside_;
        if (((from_bitField0_ & 0x00000800) == 0x00000800)) {
          to_bitField0_ |= 0x00000800;
        }
        result.outside_ = outside_;
        if (((from_bitField0_ & 0x00001000) == 0x00001000)) {
          to_bitField0_ |= 0x00001000;
        }
        result.ccl_ = ccl_;
        if (((from_bitField0_ & 0x00002000) == 0x00002000)) {
          to_bitField0_ |= 0x00002000;
        }
        result.riseNum_ = riseNum_;
        if (((from_bitField0_ & 0x00004000) == 0x00004000)) {
          to_bitField0_ |= 0x00004000;
        }
        result.fairNum_ = fairNum_;
        if (((from_bitField0_ & 0x00008000) == 0x00008000)) {
          to_bitField0_ |= 0x00008000;
        }
        result.fallNum_ = fallNum_;
        if (((from_bitField0_ & 0x00010000) == 0x00010000)) {
          to_bitField0_ |= 0x00010000;
        }
        result.weekHigh_ = weekHigh_;
        if (((from_bitField0_ & 0x00020000) == 0x00020000)) {
          to_bitField0_ |= 0x00020000;
        }
        result.weekLow_ = weekLow_;
        if (((from_bitField0_ & 0x00040000) == 0x00040000)) {
          to_bitField0_ |= 0x00040000;
        }
        result.lyrPeratio_ = lyrPeratio_;
        if (((from_bitField0_ & 0x00080000) == 0x00080000)) {
          to_bitField0_ |= 0x00080000;
        }
        result.mrqPeratio_ = mrqPeratio_;
        if (((from_bitField0_ & 0x00100000) == 0x00100000)) {
          to_bitField0_ |= 0x00100000;
        }
        result.ttmPeratio_ = ttmPeratio_;
        if (((from_bitField0_ & 0x00200000) == 0x00200000)) {
          to_bitField0_ |= 0x00200000;
        }
        result.netFundsFlow_ = netFundsFlow_;
        if (((from_bitField0_ & 0x00400000) == 0x00400000)) {
          to_bitField0_ |= 0x00400000;
        }
        result.perShareEarn_ = perShareEarn_;
        if (((from_bitField0_ & 0x00800000) == 0x00800000)) {
          to_bitField0_ |= 0x00800000;
        }
        result.netAssetsPerShare_ = netAssetsPerShare_;
        if (((from_bitField0_ & 0x01000000) == 0x01000000)) {
          to_bitField0_ |= 0x01000000;
        }
        result.totalShareCapital_ = totalShareCapital_;
        if (((from_bitField0_ & 0x02000000) == 0x02000000)) {
          to_bitField0_ |= 0x02000000;
        }
        result.circulatingCapital_ = circulatingCapital_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.baidu.stock.quote.protocbuf.SnapShotExtraProto.SnapShotExtra) {
          return mergeFrom((com.baidu.stock.quote.protocbuf.SnapShotExtraProto.SnapShotExtra)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.baidu.stock.quote.protocbuf.SnapShotExtraProto.SnapShotExtra other) {
        if (other == com.baidu.stock.quote.protocbuf.SnapShotExtraProto.SnapShotExtra.getDefaultInstance()) return this;
        if (other.hasAmplitudeRatio()) {
          setAmplitudeRatio(other.getAmplitudeRatio());
        }
        if (other.hasTurnoverRatio()) {
          setTurnoverRatio(other.getTurnoverRatio());
        }
        if (other.hasCurrencyValue()) {
          setCurrencyValue(other.getCurrencyValue());
        }
        if (other.hasCapitalization()) {
          setCapitalization(other.getCapitalization());
        }
        if (other.hasDealCount()) {
          setDealCount(other.getDealCount());
        }
        if (other.hasVolumeRatio()) {
          setVolumeRatio(other.getVolumeRatio());
        }
        if (other.hasWeibiRatio()) {
          setWeibiRatio(other.getWeibiRatio());
        }
        if (other.hasBvRatio()) {
          setBvRatio(other.getBvRatio());
        }
        if (other.hasPsRatio()) {
          setPsRatio(other.getPsRatio());
        }
        if (other.hasNowVol()) {
          setNowVol(other.getNowVol());
        }
        if (other.hasInside()) {
          setInside(other.getInside());
        }
        if (other.hasOutside()) {
          setOutside(other.getOutside());
        }
        if (other.hasCcl()) {
          setCcl(other.getCcl());
        }
        if (other.hasRiseNum()) {
          setRiseNum(other.getRiseNum());
        }
        if (other.hasFairNum()) {
          setFairNum(other.getFairNum());
        }
        if (other.hasFallNum()) {
          setFallNum(other.getFallNum());
        }
        if (other.hasWeekHigh()) {
          setWeekHigh(other.getWeekHigh());
        }
        if (other.hasWeekLow()) {
          setWeekLow(other.getWeekLow());
        }
        if (other.hasLyrPeratio()) {
          setLyrPeratio(other.getLyrPeratio());
        }
        if (other.hasMrqPeratio()) {
          setMrqPeratio(other.getMrqPeratio());
        }
        if (other.hasTtmPeratio()) {
          setTtmPeratio(other.getTtmPeratio());
        }
        if (other.hasNetFundsFlow()) {
          setNetFundsFlow(other.getNetFundsFlow());
        }
        if (other.hasPerShareEarn()) {
          setPerShareEarn(other.getPerShareEarn());
        }
        if (other.hasNetAssetsPerShare()) {
          setNetAssetsPerShare(other.getNetAssetsPerShare());
        }
        if (other.hasTotalShareCapital()) {
          setTotalShareCapital(other.getTotalShareCapital());
        }
        if (other.hasCirculatingCapital()) {
          setCirculatingCapital(other.getCirculatingCapital());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.baidu.stock.quote.protocbuf.SnapShotExtraProto.SnapShotExtra parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.baidu.stock.quote.protocbuf.SnapShotExtraProto.SnapShotExtra) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private float amplitudeRatio_ ;
      /**
       * <code>optional float amplitudeRatio = 1;</code>
       *
       * <pre>
       * 振幅
       * </pre>
       */
      public boolean hasAmplitudeRatio() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional float amplitudeRatio = 1;</code>
       *
       * <pre>
       * 振幅
       * </pre>
       */
      public float getAmplitudeRatio() {
        return amplitudeRatio_;
      }
      /**
       * <code>optional float amplitudeRatio = 1;</code>
       *
       * <pre>
       * 振幅
       * </pre>
       */
      public Builder setAmplitudeRatio(float value) {
        bitField0_ |= 0x00000001;
        amplitudeRatio_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float amplitudeRatio = 1;</code>
       *
       * <pre>
       * 振幅
       * </pre>
       */
      public Builder clearAmplitudeRatio() {
        bitField0_ = (bitField0_ & ~0x00000001);
        amplitudeRatio_ = 0F;
        onChanged();
        return this;
      }

      private float turnoverRatio_ ;
      /**
       * <code>optional float turnoverRatio = 2;</code>
       *
       * <pre>
       * 换手率
       * </pre>
       */
      public boolean hasTurnoverRatio() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional float turnoverRatio = 2;</code>
       *
       * <pre>
       * 换手率
       * </pre>
       */
      public float getTurnoverRatio() {
        return turnoverRatio_;
      }
      /**
       * <code>optional float turnoverRatio = 2;</code>
       *
       * <pre>
       * 换手率
       * </pre>
       */
      public Builder setTurnoverRatio(float value) {
        bitField0_ |= 0x00000002;
        turnoverRatio_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float turnoverRatio = 2;</code>
       *
       * <pre>
       * 换手率
       * </pre>
       */
      public Builder clearTurnoverRatio() {
        bitField0_ = (bitField0_ & ~0x00000002);
        turnoverRatio_ = 0F;
        onChanged();
        return this;
      }

      private double currencyValue_ ;
      /**
       * <code>optional double currencyValue = 3;</code>
       *
       * <pre>
       * 流通市值
       * </pre>
       */
      public boolean hasCurrencyValue() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional double currencyValue = 3;</code>
       *
       * <pre>
       * 流通市值
       * </pre>
       */
      public double getCurrencyValue() {
        return currencyValue_;
      }
      /**
       * <code>optional double currencyValue = 3;</code>
       *
       * <pre>
       * 流通市值
       * </pre>
       */
      public Builder setCurrencyValue(double value) {
        bitField0_ |= 0x00000004;
        currencyValue_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional double currencyValue = 3;</code>
       *
       * <pre>
       * 流通市值
       * </pre>
       */
      public Builder clearCurrencyValue() {
        bitField0_ = (bitField0_ & ~0x00000004);
        currencyValue_ = 0D;
        onChanged();
        return this;
      }

      private double capitalization_ ;
      /**
       * <code>optional double capitalization = 4;</code>
       *
       * <pre>
       * 总市值
       * </pre>
       */
      public boolean hasCapitalization() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional double capitalization = 4;</code>
       *
       * <pre>
       * 总市值
       * </pre>
       */
      public double getCapitalization() {
        return capitalization_;
      }
      /**
       * <code>optional double capitalization = 4;</code>
       *
       * <pre>
       * 总市值
       * </pre>
       */
      public Builder setCapitalization(double value) {
        bitField0_ |= 0x00000008;
        capitalization_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional double capitalization = 4;</code>
       *
       * <pre>
       * 总市值
       * </pre>
       */
      public Builder clearCapitalization() {
        bitField0_ = (bitField0_ & ~0x00000008);
        capitalization_ = 0D;
        onChanged();
        return this;
      }

      private int dealCount_ ;
      /**
       * <code>optional int32 dealCount = 5;</code>
       *
       * <pre>
       * 成交笔数
       * </pre>
       */
      public boolean hasDealCount() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional int32 dealCount = 5;</code>
       *
       * <pre>
       * 成交笔数
       * </pre>
       */
      public int getDealCount() {
        return dealCount_;
      }
      /**
       * <code>optional int32 dealCount = 5;</code>
       *
       * <pre>
       * 成交笔数
       * </pre>
       */
      public Builder setDealCount(int value) {
        bitField0_ |= 0x00000010;
        dealCount_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 dealCount = 5;</code>
       *
       * <pre>
       * 成交笔数
       * </pre>
       */
      public Builder clearDealCount() {
        bitField0_ = (bitField0_ & ~0x00000010);
        dealCount_ = 0;
        onChanged();
        return this;
      }

      private float volumeRatio_ ;
      /**
       * <code>optional float volumeRatio = 6;</code>
       *
       * <pre>
       * 量比
       * </pre>
       */
      public boolean hasVolumeRatio() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional float volumeRatio = 6;</code>
       *
       * <pre>
       * 量比
       * </pre>
       */
      public float getVolumeRatio() {
        return volumeRatio_;
      }
      /**
       * <code>optional float volumeRatio = 6;</code>
       *
       * <pre>
       * 量比
       * </pre>
       */
      public Builder setVolumeRatio(float value) {
        bitField0_ |= 0x00000020;
        volumeRatio_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float volumeRatio = 6;</code>
       *
       * <pre>
       * 量比
       * </pre>
       */
      public Builder clearVolumeRatio() {
        bitField0_ = (bitField0_ & ~0x00000020);
        volumeRatio_ = 0F;
        onChanged();
        return this;
      }

      private float weibiRatio_ ;
      /**
       * <code>optional float weibiRatio = 7;</code>
       *
       * <pre>
       * 委比
       * </pre>
       */
      public boolean hasWeibiRatio() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>optional float weibiRatio = 7;</code>
       *
       * <pre>
       * 委比
       * </pre>
       */
      public float getWeibiRatio() {
        return weibiRatio_;
      }
      /**
       * <code>optional float weibiRatio = 7;</code>
       *
       * <pre>
       * 委比
       * </pre>
       */
      public Builder setWeibiRatio(float value) {
        bitField0_ |= 0x00000040;
        weibiRatio_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float weibiRatio = 7;</code>
       *
       * <pre>
       * 委比
       * </pre>
       */
      public Builder clearWeibiRatio() {
        bitField0_ = (bitField0_ & ~0x00000040);
        weibiRatio_ = 0F;
        onChanged();
        return this;
      }

      private float bvRatio_ ;
      /**
       * <code>optional float bvRatio = 8;</code>
       *
       * <pre>
       * 市净率
       * </pre>
       */
      public boolean hasBvRatio() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      /**
       * <code>optional float bvRatio = 8;</code>
       *
       * <pre>
       * 市净率
       * </pre>
       */
      public float getBvRatio() {
        return bvRatio_;
      }
      /**
       * <code>optional float bvRatio = 8;</code>
       *
       * <pre>
       * 市净率
       * </pre>
       */
      public Builder setBvRatio(float value) {
        bitField0_ |= 0x00000080;
        bvRatio_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float bvRatio = 8;</code>
       *
       * <pre>
       * 市净率
       * </pre>
       */
      public Builder clearBvRatio() {
        bitField0_ = (bitField0_ & ~0x00000080);
        bvRatio_ = 0F;
        onChanged();
        return this;
      }

      private float psRatio_ ;
      /**
       * <code>optional float psRatio = 9;</code>
       *
       * <pre>
       * 市销率
       * </pre>
       */
      public boolean hasPsRatio() {
        return ((bitField0_ & 0x00000100) == 0x00000100);
      }
      /**
       * <code>optional float psRatio = 9;</code>
       *
       * <pre>
       * 市销率
       * </pre>
       */
      public float getPsRatio() {
        return psRatio_;
      }
      /**
       * <code>optional float psRatio = 9;</code>
       *
       * <pre>
       * 市销率
       * </pre>
       */
      public Builder setPsRatio(float value) {
        bitField0_ |= 0x00000100;
        psRatio_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float psRatio = 9;</code>
       *
       * <pre>
       * 市销率
       * </pre>
       */
      public Builder clearPsRatio() {
        bitField0_ = (bitField0_ & ~0x00000100);
        psRatio_ = 0F;
        onChanged();
        return this;
      }

      private long nowVol_ ;
      /**
       * <code>optional int64 nowVol = 10;</code>
       *
       * <pre>
       * 现量 (当前交易的成交量, 单位: 股)
       * </pre>
       */
      public boolean hasNowVol() {
        return ((bitField0_ & 0x00000200) == 0x00000200);
      }
      /**
       * <code>optional int64 nowVol = 10;</code>
       *
       * <pre>
       * 现量 (当前交易的成交量, 单位: 股)
       * </pre>
       */
      public long getNowVol() {
        return nowVol_;
      }
      /**
       * <code>optional int64 nowVol = 10;</code>
       *
       * <pre>
       * 现量 (当前交易的成交量, 单位: 股)
       * </pre>
       */
      public Builder setNowVol(long value) {
        bitField0_ |= 0x00000200;
        nowVol_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int64 nowVol = 10;</code>
       *
       * <pre>
       * 现量 (当前交易的成交量, 单位: 股)
       * </pre>
       */
      public Builder clearNowVol() {
        bitField0_ = (bitField0_ & ~0x00000200);
        nowVol_ = 0L;
        onChanged();
        return this;
      }

      private int inside_ ;
      /**
       * <code>optional int32 inside = 11;</code>
       *
       * <pre>
       * 内盘
       * </pre>
       */
      public boolean hasInside() {
        return ((bitField0_ & 0x00000400) == 0x00000400);
      }
      /**
       * <code>optional int32 inside = 11;</code>
       *
       * <pre>
       * 内盘
       * </pre>
       */
      public int getInside() {
        return inside_;
      }
      /**
       * <code>optional int32 inside = 11;</code>
       *
       * <pre>
       * 内盘
       * </pre>
       */
      public Builder setInside(int value) {
        bitField0_ |= 0x00000400;
        inside_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 inside = 11;</code>
       *
       * <pre>
       * 内盘
       * </pre>
       */
      public Builder clearInside() {
        bitField0_ = (bitField0_ & ~0x00000400);
        inside_ = 0;
        onChanged();
        return this;
      }

      private int outside_ ;
      /**
       * <code>optional int32 outside = 12;</code>
       *
       * <pre>
       * 外盘
       * </pre>
       */
      public boolean hasOutside() {
        return ((bitField0_ & 0x00000800) == 0x00000800);
      }
      /**
       * <code>optional int32 outside = 12;</code>
       *
       * <pre>
       * 外盘
       * </pre>
       */
      public int getOutside() {
        return outside_;
      }
      /**
       * <code>optional int32 outside = 12;</code>
       *
       * <pre>
       * 外盘
       * </pre>
       */
      public Builder setOutside(int value) {
        bitField0_ |= 0x00000800;
        outside_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 outside = 12;</code>
       *
       * <pre>
       * 外盘
       * </pre>
       */
      public Builder clearOutside() {
        bitField0_ = (bitField0_ & ~0x00000800);
        outside_ = 0;
        onChanged();
        return this;
      }

      private int ccl_ ;
      /**
       * <code>optional int32 ccl = 13;</code>
       *
       * <pre>
       * 持仓量
       * </pre>
       */
      public boolean hasCcl() {
        return ((bitField0_ & 0x00001000) == 0x00001000);
      }
      /**
       * <code>optional int32 ccl = 13;</code>
       *
       * <pre>
       * 持仓量
       * </pre>
       */
      public int getCcl() {
        return ccl_;
      }
      /**
       * <code>optional int32 ccl = 13;</code>
       *
       * <pre>
       * 持仓量
       * </pre>
       */
      public Builder setCcl(int value) {
        bitField0_ |= 0x00001000;
        ccl_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 ccl = 13;</code>
       *
       * <pre>
       * 持仓量
       * </pre>
       */
      public Builder clearCcl() {
        bitField0_ = (bitField0_ & ~0x00001000);
        ccl_ = 0;
        onChanged();
        return this;
      }

      private int riseNum_ ;
      /**
       * <code>optional int32 riseNum = 14;</code>
       *
       * <pre>
       * 涨家数
       * </pre>
       */
      public boolean hasRiseNum() {
        return ((bitField0_ & 0x00002000) == 0x00002000);
      }
      /**
       * <code>optional int32 riseNum = 14;</code>
       *
       * <pre>
       * 涨家数
       * </pre>
       */
      public int getRiseNum() {
        return riseNum_;
      }
      /**
       * <code>optional int32 riseNum = 14;</code>
       *
       * <pre>
       * 涨家数
       * </pre>
       */
      public Builder setRiseNum(int value) {
        bitField0_ |= 0x00002000;
        riseNum_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 riseNum = 14;</code>
       *
       * <pre>
       * 涨家数
       * </pre>
       */
      public Builder clearRiseNum() {
        bitField0_ = (bitField0_ & ~0x00002000);
        riseNum_ = 0;
        onChanged();
        return this;
      }

      private int fairNum_ ;
      /**
       * <code>optional int32 fairNum = 15;</code>
       *
       * <pre>
       * 平家数
       * </pre>
       */
      public boolean hasFairNum() {
        return ((bitField0_ & 0x00004000) == 0x00004000);
      }
      /**
       * <code>optional int32 fairNum = 15;</code>
       *
       * <pre>
       * 平家数
       * </pre>
       */
      public int getFairNum() {
        return fairNum_;
      }
      /**
       * <code>optional int32 fairNum = 15;</code>
       *
       * <pre>
       * 平家数
       * </pre>
       */
      public Builder setFairNum(int value) {
        bitField0_ |= 0x00004000;
        fairNum_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 fairNum = 15;</code>
       *
       * <pre>
       * 平家数
       * </pre>
       */
      public Builder clearFairNum() {
        bitField0_ = (bitField0_ & ~0x00004000);
        fairNum_ = 0;
        onChanged();
        return this;
      }

      private int fallNum_ ;
      /**
       * <code>optional int32 fallNum = 16;</code>
       *
       * <pre>
       * 跌家数
       * </pre>
       */
      public boolean hasFallNum() {
        return ((bitField0_ & 0x00008000) == 0x00008000);
      }
      /**
       * <code>optional int32 fallNum = 16;</code>
       *
       * <pre>
       * 跌家数
       * </pre>
       */
      public int getFallNum() {
        return fallNum_;
      }
      /**
       * <code>optional int32 fallNum = 16;</code>
       *
       * <pre>
       * 跌家数
       * </pre>
       */
      public Builder setFallNum(int value) {
        bitField0_ |= 0x00008000;
        fallNum_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 fallNum = 16;</code>
       *
       * <pre>
       * 跌家数
       * </pre>
       */
      public Builder clearFallNum() {
        bitField0_ = (bitField0_ & ~0x00008000);
        fallNum_ = 0;
        onChanged();
        return this;
      }

      private float weekHigh_ ;
      /**
       * <code>optional float weekHigh = 17;</code>
       *
       * <pre>
       * 52周高
       * </pre>
       */
      public boolean hasWeekHigh() {
        return ((bitField0_ & 0x00010000) == 0x00010000);
      }
      /**
       * <code>optional float weekHigh = 17;</code>
       *
       * <pre>
       * 52周高
       * </pre>
       */
      public float getWeekHigh() {
        return weekHigh_;
      }
      /**
       * <code>optional float weekHigh = 17;</code>
       *
       * <pre>
       * 52周高
       * </pre>
       */
      public Builder setWeekHigh(float value) {
        bitField0_ |= 0x00010000;
        weekHigh_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float weekHigh = 17;</code>
       *
       * <pre>
       * 52周高
       * </pre>
       */
      public Builder clearWeekHigh() {
        bitField0_ = (bitField0_ & ~0x00010000);
        weekHigh_ = 0F;
        onChanged();
        return this;
      }

      private float weekLow_ ;
      /**
       * <code>optional float weekLow = 18;</code>
       *
       * <pre>
       * 52周低
       * </pre>
       */
      public boolean hasWeekLow() {
        return ((bitField0_ & 0x00020000) == 0x00020000);
      }
      /**
       * <code>optional float weekLow = 18;</code>
       *
       * <pre>
       * 52周低
       * </pre>
       */
      public float getWeekLow() {
        return weekLow_;
      }
      /**
       * <code>optional float weekLow = 18;</code>
       *
       * <pre>
       * 52周低
       * </pre>
       */
      public Builder setWeekLow(float value) {
        bitField0_ |= 0x00020000;
        weekLow_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float weekLow = 18;</code>
       *
       * <pre>
       * 52周低
       * </pre>
       */
      public Builder clearWeekLow() {
        bitField0_ = (bitField0_ & ~0x00020000);
        weekLow_ = 0F;
        onChanged();
        return this;
      }

      private float lyrPeratio_ ;
      /**
       * <code>optional float lyrPeratio = 19;</code>
       *
       * <pre>
       * LYR市盈率
       * </pre>
       */
      public boolean hasLyrPeratio() {
        return ((bitField0_ & 0x00040000) == 0x00040000);
      }
      /**
       * <code>optional float lyrPeratio = 19;</code>
       *
       * <pre>
       * LYR市盈率
       * </pre>
       */
      public float getLyrPeratio() {
        return lyrPeratio_;
      }
      /**
       * <code>optional float lyrPeratio = 19;</code>
       *
       * <pre>
       * LYR市盈率
       * </pre>
       */
      public Builder setLyrPeratio(float value) {
        bitField0_ |= 0x00040000;
        lyrPeratio_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float lyrPeratio = 19;</code>
       *
       * <pre>
       * LYR市盈率
       * </pre>
       */
      public Builder clearLyrPeratio() {
        bitField0_ = (bitField0_ & ~0x00040000);
        lyrPeratio_ = 0F;
        onChanged();
        return this;
      }

      private float mrqPeratio_ ;
      /**
       * <code>optional float mrqPeratio = 20;</code>
       *
       * <pre>
       * mrq市盈率
       * </pre>
       */
      public boolean hasMrqPeratio() {
        return ((bitField0_ & 0x00080000) == 0x00080000);
      }
      /**
       * <code>optional float mrqPeratio = 20;</code>
       *
       * <pre>
       * mrq市盈率
       * </pre>
       */
      public float getMrqPeratio() {
        return mrqPeratio_;
      }
      /**
       * <code>optional float mrqPeratio = 20;</code>
       *
       * <pre>
       * mrq市盈率
       * </pre>
       */
      public Builder setMrqPeratio(float value) {
        bitField0_ |= 0x00080000;
        mrqPeratio_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float mrqPeratio = 20;</code>
       *
       * <pre>
       * mrq市盈率
       * </pre>
       */
      public Builder clearMrqPeratio() {
        bitField0_ = (bitField0_ & ~0x00080000);
        mrqPeratio_ = 0F;
        onChanged();
        return this;
      }

      private float ttmPeratio_ ;
      /**
       * <code>optional float ttmPeratio = 21;</code>
       *
       * <pre>
       * TTM市盈率
       * </pre>
       */
      public boolean hasTtmPeratio() {
        return ((bitField0_ & 0x00100000) == 0x00100000);
      }
      /**
       * <code>optional float ttmPeratio = 21;</code>
       *
       * <pre>
       * TTM市盈率
       * </pre>
       */
      public float getTtmPeratio() {
        return ttmPeratio_;
      }
      /**
       * <code>optional float ttmPeratio = 21;</code>
       *
       * <pre>
       * TTM市盈率
       * </pre>
       */
      public Builder setTtmPeratio(float value) {
        bitField0_ |= 0x00100000;
        ttmPeratio_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float ttmPeratio = 21;</code>
       *
       * <pre>
       * TTM市盈率
       * </pre>
       */
      public Builder clearTtmPeratio() {
        bitField0_ = (bitField0_ & ~0x00100000);
        ttmPeratio_ = 0F;
        onChanged();
        return this;
      }

      private double netFundsFlow_ ;
      /**
       * <code>optional double netFundsFlow = 22;</code>
       *
       * <pre>
       *主力资金净流入
       * </pre>
       */
      public boolean hasNetFundsFlow() {
        return ((bitField0_ & 0x00200000) == 0x00200000);
      }
      /**
       * <code>optional double netFundsFlow = 22;</code>
       *
       * <pre>
       *主力资金净流入
       * </pre>
       */
      public double getNetFundsFlow() {
        return netFundsFlow_;
      }
      /**
       * <code>optional double netFundsFlow = 22;</code>
       *
       * <pre>
       *主力资金净流入
       * </pre>
       */
      public Builder setNetFundsFlow(double value) {
        bitField0_ |= 0x00200000;
        netFundsFlow_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional double netFundsFlow = 22;</code>
       *
       * <pre>
       *主力资金净流入
       * </pre>
       */
      public Builder clearNetFundsFlow() {
        bitField0_ = (bitField0_ & ~0x00200000);
        netFundsFlow_ = 0D;
        onChanged();
        return this;
      }

      private float perShareEarn_ ;
      /**
       * <code>optional float perShareEarn = 23;</code>
       *
       * <pre>
       *每股收益
       * </pre>
       */
      public boolean hasPerShareEarn() {
        return ((bitField0_ & 0x00400000) == 0x00400000);
      }
      /**
       * <code>optional float perShareEarn = 23;</code>
       *
       * <pre>
       *每股收益
       * </pre>
       */
      public float getPerShareEarn() {
        return perShareEarn_;
      }
      /**
       * <code>optional float perShareEarn = 23;</code>
       *
       * <pre>
       *每股收益
       * </pre>
       */
      public Builder setPerShareEarn(float value) {
        bitField0_ |= 0x00400000;
        perShareEarn_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float perShareEarn = 23;</code>
       *
       * <pre>
       *每股收益
       * </pre>
       */
      public Builder clearPerShareEarn() {
        bitField0_ = (bitField0_ & ~0x00400000);
        perShareEarn_ = 0F;
        onChanged();
        return this;
      }

      private float netAssetsPerShare_ ;
      /**
       * <code>optional float netAssetsPerShare = 24;</code>
       *
       * <pre>
       *每股净资产
       * </pre>
       */
      public boolean hasNetAssetsPerShare() {
        return ((bitField0_ & 0x00800000) == 0x00800000);
      }
      /**
       * <code>optional float netAssetsPerShare = 24;</code>
       *
       * <pre>
       *每股净资产
       * </pre>
       */
      public float getNetAssetsPerShare() {
        return netAssetsPerShare_;
      }
      /**
       * <code>optional float netAssetsPerShare = 24;</code>
       *
       * <pre>
       *每股净资产
       * </pre>
       */
      public Builder setNetAssetsPerShare(float value) {
        bitField0_ |= 0x00800000;
        netAssetsPerShare_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float netAssetsPerShare = 24;</code>
       *
       * <pre>
       *每股净资产
       * </pre>
       */
      public Builder clearNetAssetsPerShare() {
        bitField0_ = (bitField0_ & ~0x00800000);
        netAssetsPerShare_ = 0F;
        onChanged();
        return this;
      }

      private long totalShareCapital_ ;
      /**
       * <code>optional int64 totalShareCapital = 25;</code>
       *
       * <pre>
       *总股本
       * </pre>
       */
      public boolean hasTotalShareCapital() {
        return ((bitField0_ & 0x01000000) == 0x01000000);
      }
      /**
       * <code>optional int64 totalShareCapital = 25;</code>
       *
       * <pre>
       *总股本
       * </pre>
       */
      public long getTotalShareCapital() {
        return totalShareCapital_;
      }
      /**
       * <code>optional int64 totalShareCapital = 25;</code>
       *
       * <pre>
       *总股本
       * </pre>
       */
      public Builder setTotalShareCapital(long value) {
        bitField0_ |= 0x01000000;
        totalShareCapital_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int64 totalShareCapital = 25;</code>
       *
       * <pre>
       *总股本
       * </pre>
       */
      public Builder clearTotalShareCapital() {
        bitField0_ = (bitField0_ & ~0x01000000);
        totalShareCapital_ = 0L;
        onChanged();
        return this;
      }

      private long circulatingCapital_ ;
      /**
       * <code>optional int64 circulatingCapital = 26;</code>
       *
       * <pre>
       *流通股本
       * </pre>
       */
      public boolean hasCirculatingCapital() {
        return ((bitField0_ & 0x02000000) == 0x02000000);
      }
      /**
       * <code>optional int64 circulatingCapital = 26;</code>
       *
       * <pre>
       *流通股本
       * </pre>
       */
      public long getCirculatingCapital() {
        return circulatingCapital_;
      }
      /**
       * <code>optional int64 circulatingCapital = 26;</code>
       *
       * <pre>
       *流通股本
       * </pre>
       */
      public Builder setCirculatingCapital(long value) {
        bitField0_ |= 0x02000000;
        circulatingCapital_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int64 circulatingCapital = 26;</code>
       *
       * <pre>
       *流通股本
       * </pre>
       */
      public Builder clearCirculatingCapital() {
        bitField0_ = (bitField0_ & ~0x02000000);
        circulatingCapital_ = 0L;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:com.baidu.stock.quote.protocbuf.SnapShotExtra)
    }

    static {
      defaultInstance = new SnapShotExtra(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:com.baidu.stock.quote.protocbuf.SnapShotExtra)
  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_com_baidu_stock_quote_protocbuf_SnapShotExtra_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_baidu_stock_quote_protocbuf_SnapShotExtra_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\023SnapShotExtra.proto\022\037com.baidu.stock.q" +
      "uote.protocbuf\"\231\004\n\rSnapShotExtra\022\026\n\016ampl" +
      "itudeRatio\030\001 \001(\002\022\025\n\rturnoverRatio\030\002 \001(\002\022" +
      "\025\n\rcurrencyValue\030\003 \001(\001\022\026\n\016capitalization" +
      "\030\004 \001(\001\022\021\n\tdealCount\030\005 \001(\005\022\023\n\013volumeRatio" +
      "\030\006 \001(\002\022\022\n\nweibiRatio\030\007 \001(\002\022\017\n\007bvRatio\030\010 " +
      "\001(\002\022\017\n\007psRatio\030\t \001(\002\022\016\n\006nowVol\030\n \001(\003\022\016\n\006" +
      "inside\030\013 \001(\005\022\017\n\007outside\030\014 \001(\005\022\013\n\003ccl\030\r \001" +
      "(\005\022\017\n\007riseNum\030\016 \001(\005\022\017\n\007fairNum\030\017 \001(\005\022\017\n\007" +
      "fallNum\030\020 \001(\005\022\020\n\010weekHigh\030\021 \001(\002\022\017\n\007weekL",
      "ow\030\022 \001(\002\022\022\n\nlyrPeratio\030\023 \001(\002\022\022\n\nmrqPerat" +
      "io\030\024 \001(\002\022\022\n\nttmPeratio\030\025 \001(\002\022\024\n\014netFunds" +
      "Flow\030\026 \001(\001\022\024\n\014perShareEarn\030\027 \001(\002\022\031\n\021netA" +
      "ssetsPerShare\030\030 \001(\002\022\031\n\021totalShareCapital" +
      "\030\031 \001(\003\022\032\n\022circulatingCapital\030\032 \001(\003B5\n\037co" +
      "m.baidu.stock.quote.protocbufB\022SnapShotE" +
      "xtraProto"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
        new com.google.protobuf.Descriptors.FileDescriptor.    InternalDescriptorAssigner() {
          public com.google.protobuf.ExtensionRegistry assignDescriptors(
              com.google.protobuf.Descriptors.FileDescriptor root) {
            descriptor = root;
            return null;
          }
        };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        }, assigner);
    internal_static_com_baidu_stock_quote_protocbuf_SnapShotExtra_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_com_baidu_stock_quote_protocbuf_SnapShotExtra_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_com_baidu_stock_quote_protocbuf_SnapShotExtra_descriptor,
        new java.lang.String[] { "AmplitudeRatio", "TurnoverRatio", "CurrencyValue", "Capitalization", "DealCount", "VolumeRatio", "WeibiRatio", "BvRatio", "PsRatio", "NowVol", "Inside", "Outside", "Ccl", "RiseNum", "FairNum", "FallNum", "WeekHigh", "WeekLow", "LyrPeratio", "MrqPeratio", "TtmPeratio", "NetFundsFlow", "PerShareEarn", "NetAssetsPerShare", "TotalShareCapital", "CirculatingCapital", });
  }

  // @@protoc_insertion_point(outer_class_scope)
}
