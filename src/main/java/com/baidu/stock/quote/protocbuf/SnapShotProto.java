// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SnapShot.proto

package com.baidu.stock.quote.protocbuf;

public final class SnapShotProto {
  private SnapShotProto() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
  }
  public interface SnapShotOrBuilder extends
      // @@protoc_insertion_point(interface_extends:com.baidu.stock.quote.protocbuf.SnapShot)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>required string date = 1;</code>
     *
     * <pre>
     * 日期格式 yyyyMMdd
     * </pre>
     */
    boolean hasDate();
    /**
     * <code>required string date = 1;</code>
     *
     * <pre>
     * 日期格式 yyyyMMdd
     * </pre>
     */
    java.lang.String getDate();
    /**
     * <code>required string date = 1;</code>
     *
     * <pre>
     * 日期格式 yyyyMMdd
     * </pre>
     */
    com.google.protobuf.ByteString
        getDateBytes();

    /**
     * <code>required string time = 2;</code>
     *
     * <pre>
     * 时间格式 HHmmss
     * </pre>
     */
    boolean hasTime();
    /**
     * <code>required string time = 2;</code>
     *
     * <pre>
     * 时间格式 HHmmss
     * </pre>
     */
    java.lang.String getTime();
    /**
     * <code>required string time = 2;</code>
     *
     * <pre>
     * 时间格式 HHmmss
     * </pre>
     */
    com.google.protobuf.ByteString
        getTimeBytes();

    /**
     * <code>required .com.baidu.stock.quote.protocbuf.StockBasic stockBasic = 3;</code>
     *
     * <pre>
     * 股票信息
     * </pre>
     */
    boolean hasStockBasic();
    /**
     * <code>required .com.baidu.stock.quote.protocbuf.StockBasic stockBasic = 3;</code>
     *
     * <pre>
     * 股票信息
     * </pre>
     */
    com.baidu.stock.quote.protocbuf.StockBasicProto.StockBasic getStockBasic();
    /**
     * <code>required .com.baidu.stock.quote.protocbuf.StockBasic stockBasic = 3;</code>
     *
     * <pre>
     * 股票信息
     * </pre>
     */
    com.baidu.stock.quote.protocbuf.StockBasicProto.StockBasicOrBuilder getStockBasicOrBuilder();

    /**
     * <code>optional float preClose = 4;</code>
     *
     * <pre>
     * 昨收盘价
     * </pre>
     */
    boolean hasPreClose();
    /**
     * <code>optional float preClose = 4;</code>
     *
     * <pre>
     * 昨收盘价
     * </pre>
     */
    float getPreClose();

    /**
     * <code>optional float high = 5;</code>
     *
     * <pre>
     * 最高价
     * </pre>
     */
    boolean hasHigh();
    /**
     * <code>optional float high = 5;</code>
     *
     * <pre>
     * 最高价
     * </pre>
     */
    float getHigh();

    /**
     * <code>optional float open = 6;</code>
     *
     * <pre>
     * 开盘价
     * </pre>
     */
    boolean hasOpen();
    /**
     * <code>optional float open = 6;</code>
     *
     * <pre>
     * 开盘价
     * </pre>
     */
    float getOpen();

    /**
     * <code>optional float low = 7;</code>
     *
     * <pre>
     * 最低价
     * </pre>
     */
    boolean hasLow();
    /**
     * <code>optional float low = 7;</code>
     *
     * <pre>
     * 最低价
     * </pre>
     */
    float getLow();

    /**
     * <code>optional float close = 8;</code>
     *
     * <pre>
     * 今收盘价
     * </pre>
     */
    boolean hasClose();
    /**
     * <code>optional float close = 8;</code>
     *
     * <pre>
     * 今收盘价
     * </pre>
     */
    float getClose();

    /**
     * <code>optional int64 volume = 9;</code>
     *
     * <pre>
     * 成交总量 (股)
     * </pre>
     */
    boolean hasVolume();
    /**
     * <code>optional int64 volume = 9;</code>
     *
     * <pre>
     * 成交总量 (股)
     * </pre>
     */
    long getVolume();

    /**
     * <code>optional double amount = 10;</code>
     *
     * <pre>
     * 成交金额 (元)
     * </pre>
     */
    boolean hasAmount();
    /**
     * <code>optional double amount = 10;</code>
     *
     * <pre>
     * 成交金额 (元)
     * </pre>
     */
    double getAmount();

    /**
     * <code>optional float netChange = 11;</code>
     *
     * <pre>
     * 涨跌额
     * </pre>
     */
    boolean hasNetChange();
    /**
     * <code>optional float netChange = 11;</code>
     *
     * <pre>
     * 涨跌额
     * </pre>
     */
    float getNetChange();

    /**
     * <code>optional float netChangeRatio = 12;</code>
     *
     * <pre>
     * 涨跌幅
     * </pre>
     */
    boolean hasNetChangeRatio();
    /**
     * <code>optional float netChangeRatio = 12;</code>
     *
     * <pre>
     * 涨跌幅
     * </pre>
     */
    float getNetChangeRatio();

    /**
     * <code>optional float limitUp = 13;</code>
     *
     * <pre>
     * 涨停
     * </pre>
     */
    boolean hasLimitUp();
    /**
     * <code>optional float limitUp = 13;</code>
     *
     * <pre>
     * 涨停
     * </pre>
     */
    float getLimitUp();

    /**
     * <code>optional float limitDown = 14;</code>
     *
     * <pre>
     * 跌停
     * </pre>
     */
    boolean hasLimitDown();
    /**
     * <code>optional float limitDown = 14;</code>
     *
     * <pre>
     * 跌停
     * </pre>
     */
    float getLimitDown();

    /**
     * <code>repeated .com.baidu.stock.quote.protocbuf.BidAsk bid = 15;</code>
     *
     * <pre>
     * 买10档
     * </pre>
     */
    java.util.List<com.baidu.stock.quote.protocbuf.BidAskProto.BidAsk> 
        getBidList();
    /**
     * <code>repeated .com.baidu.stock.quote.protocbuf.BidAsk bid = 15;</code>
     *
     * <pre>
     * 买10档
     * </pre>
     */
    com.baidu.stock.quote.protocbuf.BidAskProto.BidAsk getBid(int index);
    /**
     * <code>repeated .com.baidu.stock.quote.protocbuf.BidAsk bid = 15;</code>
     *
     * <pre>
     * 买10档
     * </pre>
     */
    int getBidCount();
    /**
     * <code>repeated .com.baidu.stock.quote.protocbuf.BidAsk bid = 15;</code>
     *
     * <pre>
     * 买10档
     * </pre>
     */
    java.util.List<? extends com.baidu.stock.quote.protocbuf.BidAskProto.BidAskOrBuilder> 
        getBidOrBuilderList();
    /**
     * <code>repeated .com.baidu.stock.quote.protocbuf.BidAsk bid = 15;</code>
     *
     * <pre>
     * 买10档
     * </pre>
     */
    com.baidu.stock.quote.protocbuf.BidAskProto.BidAskOrBuilder getBidOrBuilder(
        int index);

    /**
     * <code>repeated .com.baidu.stock.quote.protocbuf.BidAsk ask = 16;</code>
     *
     * <pre>
     * 卖10档
     * </pre>
     */
    java.util.List<com.baidu.stock.quote.protocbuf.BidAskProto.BidAsk> 
        getAskList();
    /**
     * <code>repeated .com.baidu.stock.quote.protocbuf.BidAsk ask = 16;</code>
     *
     * <pre>
     * 卖10档
     * </pre>
     */
    com.baidu.stock.quote.protocbuf.BidAskProto.BidAsk getAsk(int index);
    /**
     * <code>repeated .com.baidu.stock.quote.protocbuf.BidAsk ask = 16;</code>
     *
     * <pre>
     * 卖10档
     * </pre>
     */
    int getAskCount();
    /**
     * <code>repeated .com.baidu.stock.quote.protocbuf.BidAsk ask = 16;</code>
     *
     * <pre>
     * 卖10档
     * </pre>
     */
    java.util.List<? extends com.baidu.stock.quote.protocbuf.BidAskProto.BidAskOrBuilder> 
        getAskOrBuilderList();
    /**
     * <code>repeated .com.baidu.stock.quote.protocbuf.BidAsk ask = 16;</code>
     *
     * <pre>
     * 卖10档
     * </pre>
     */
    com.baidu.stock.quote.protocbuf.BidAskProto.BidAskOrBuilder getAskOrBuilder(
        int index);

    /**
     * <code>optional float amplitudeRatio = 17;</code>
     *
     * <pre>
     * 振幅
     * </pre>
     */
    boolean hasAmplitudeRatio();
    /**
     * <code>optional float amplitudeRatio = 17;</code>
     *
     * <pre>
     * 振幅
     * </pre>
     */
    float getAmplitudeRatio();

    /**
     * <code>optional float turnoverRatio = 18;</code>
     *
     * <pre>
     * 换手率
     * </pre>
     */
    boolean hasTurnoverRatio();
    /**
     * <code>optional float turnoverRatio = 18;</code>
     *
     * <pre>
     * 换手率
     * </pre>
     */
    float getTurnoverRatio();

    /**
     * <code>optional double currencyValue = 19;</code>
     *
     * <pre>
     * 流通市值
     * </pre>
     */
    boolean hasCurrencyValue();
    /**
     * <code>optional double currencyValue = 19;</code>
     *
     * <pre>
     * 流通市值
     * </pre>
     */
    double getCurrencyValue();

    /**
     * <code>optional double capitalization = 20;</code>
     *
     * <pre>
     * 总市值
     * </pre>
     */
    boolean hasCapitalization();
    /**
     * <code>optional double capitalization = 20;</code>
     *
     * <pre>
     * 总市值
     * </pre>
     */
    double getCapitalization();

    /**
     * <code>optional int32 dealCount = 21;</code>
     *
     * <pre>
     * 成交笔数
     * </pre>
     */
    boolean hasDealCount();
    /**
     * <code>optional int32 dealCount = 21;</code>
     *
     * <pre>
     * 成交笔数
     * </pre>
     */
    int getDealCount();

    /**
     * <code>optional float volumeRatio = 22;</code>
     *
     * <pre>
     * 量比
     * </pre>
     */
    boolean hasVolumeRatio();
    /**
     * <code>optional float volumeRatio = 22;</code>
     *
     * <pre>
     * 量比
     * </pre>
     */
    float getVolumeRatio();

    /**
     * <code>optional float weibiRatio = 23;</code>
     *
     * <pre>
     * 委比
     * </pre>
     */
    boolean hasWeibiRatio();
    /**
     * <code>optional float weibiRatio = 23;</code>
     *
     * <pre>
     * 委比
     * </pre>
     */
    float getWeibiRatio();

    /**
     * <code>optional float bvRatio = 24;</code>
     *
     * <pre>
     * 市净率
     * </pre>
     */
    boolean hasBvRatio();
    /**
     * <code>optional float bvRatio = 24;</code>
     *
     * <pre>
     * 市净率
     * </pre>
     */
    float getBvRatio();

    /**
     * <code>optional float psRatio = 25;</code>
     *
     * <pre>
     * 市销率
     * </pre>
     */
    boolean hasPsRatio();
    /**
     * <code>optional float psRatio = 25;</code>
     *
     * <pre>
     * 市销率
     * </pre>
     */
    float getPsRatio();

    /**
     * <code>optional int64 nowVol = 26;</code>
     *
     * <pre>
     * 现量 (当前交易的成交量, 单位: 股)
     * </pre>
     */
    boolean hasNowVol();
    /**
     * <code>optional int64 nowVol = 26;</code>
     *
     * <pre>
     * 现量 (当前交易的成交量, 单位: 股)
     * </pre>
     */
    long getNowVol();

    /**
     * <code>optional int32 inside = 27;</code>
     *
     * <pre>
     * 内盘
     * </pre>
     */
    boolean hasInside();
    /**
     * <code>optional int32 inside = 27;</code>
     *
     * <pre>
     * 内盘
     * </pre>
     */
    int getInside();

    /**
     * <code>optional int32 outside = 28;</code>
     *
     * <pre>
     * 外盘
     * </pre>
     */
    boolean hasOutside();
    /**
     * <code>optional int32 outside = 28;</code>
     *
     * <pre>
     * 外盘
     * </pre>
     */
    int getOutside();

    /**
     * <code>optional int32 ccl = 29;</code>
     *
     * <pre>
     * 持仓量
     * </pre>
     */
    boolean hasCcl();
    /**
     * <code>optional int32 ccl = 29;</code>
     *
     * <pre>
     * 持仓量
     * </pre>
     */
    int getCcl();

    /**
     * <code>optional int32 riseNum = 30;</code>
     *
     * <pre>
     * 涨家数
     * </pre>
     */
    boolean hasRiseNum();
    /**
     * <code>optional int32 riseNum = 30;</code>
     *
     * <pre>
     * 涨家数
     * </pre>
     */
    int getRiseNum();

    /**
     * <code>optional int32 fairNum = 31;</code>
     *
     * <pre>
     * 平家数
     * </pre>
     */
    boolean hasFairNum();
    /**
     * <code>optional int32 fairNum = 31;</code>
     *
     * <pre>
     * 平家数
     * </pre>
     */
    int getFairNum();

    /**
     * <code>optional int32 fallNum = 32;</code>
     *
     * <pre>
     * 跌家数
     * </pre>
     */
    boolean hasFallNum();
    /**
     * <code>optional int32 fallNum = 32;</code>
     *
     * <pre>
     * 跌家数
     * </pre>
     */
    int getFallNum();

    /**
     * <code>optional float weekHigh = 33;</code>
     *
     * <pre>
     * 52周高
     * </pre>
     */
    boolean hasWeekHigh();
    /**
     * <code>optional float weekHigh = 33;</code>
     *
     * <pre>
     * 52周高
     * </pre>
     */
    float getWeekHigh();

    /**
     * <code>optional float weekLow = 34;</code>
     *
     * <pre>
     * 52周低
     * </pre>
     */
    boolean hasWeekLow();
    /**
     * <code>optional float weekLow = 34;</code>
     *
     * <pre>
     * 52周低
     * </pre>
     */
    float getWeekLow();

    /**
     * <code>optional float lyrPeratio = 35;</code>
     *
     * <pre>
     * LYR市盈率
     * </pre>
     */
    boolean hasLyrPeratio();
    /**
     * <code>optional float lyrPeratio = 35;</code>
     *
     * <pre>
     * LYR市盈率
     * </pre>
     */
    float getLyrPeratio();

    /**
     * <code>optional float mrqPeratio = 36;</code>
     *
     * <pre>
     * mrq市盈率
     * </pre>
     */
    boolean hasMrqPeratio();
    /**
     * <code>optional float mrqPeratio = 36;</code>
     *
     * <pre>
     * mrq市盈率
     * </pre>
     */
    float getMrqPeratio();

    /**
     * <code>optional float ttmPeratio = 37;</code>
     *
     * <pre>
     * TTM市盈率
     * </pre>
     */
    boolean hasTtmPeratio();
    /**
     * <code>optional float ttmPeratio = 37;</code>
     *
     * <pre>
     * TTM市盈率
     * </pre>
     */
    float getTtmPeratio();

    /**
     * <code>optional double netFundsFlow = 38;</code>
     *
     * <pre>
     *主力资金净流入
     * </pre>
     */
    boolean hasNetFundsFlow();
    /**
     * <code>optional double netFundsFlow = 38;</code>
     *
     * <pre>
     *主力资金净流入
     * </pre>
     */
    double getNetFundsFlow();

    /**
     * <code>optional float perShareEarn = 39;</code>
     *
     * <pre>
     *每股收益
     * </pre>
     */
    boolean hasPerShareEarn();
    /**
     * <code>optional float perShareEarn = 39;</code>
     *
     * <pre>
     *每股收益
     * </pre>
     */
    float getPerShareEarn();

    /**
     * <code>optional float netAssetsPerShare = 40;</code>
     *
     * <pre>
     *每股净资产
     * </pre>
     */
    boolean hasNetAssetsPerShare();
    /**
     * <code>optional float netAssetsPerShare = 40;</code>
     *
     * <pre>
     *每股净资产
     * </pre>
     */
    float getNetAssetsPerShare();

    /**
     * <code>optional int64 totalShareCapital = 41;</code>
     *
     * <pre>
     *总股本
     * </pre>
     */
    boolean hasTotalShareCapital();
    /**
     * <code>optional int64 totalShareCapital = 41;</code>
     *
     * <pre>
     *总股本
     * </pre>
     */
    long getTotalShareCapital();

    /**
     * <code>optional int64 circulatingCapital = 42;</code>
     *
     * <pre>
     *流通股本
     * </pre>
     */
    boolean hasCirculatingCapital();
    /**
     * <code>optional int64 circulatingCapital = 42;</code>
     *
     * <pre>
     *流通股本
     * </pre>
     */
    long getCirculatingCapital();

    /**
     * <code>optional int64 scanTime = 43;</code>
     *
     * <pre>
     *扫描时间 
     * </pre>
     */
    boolean hasScanTime();
    /**
     * <code>optional int64 scanTime = 43;</code>
     *
     * <pre>
     *扫描时间 
     * </pre>
     */
    long getScanTime();
  }
  /**
   * Protobuf type {@code com.baidu.stock.quote.protocbuf.SnapShot}
   */
  public static final class SnapShot extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:com.baidu.stock.quote.protocbuf.SnapShot)
      SnapShotOrBuilder {
    // Use SnapShot.newBuilder() to construct.
    private SnapShot(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private SnapShot(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final SnapShot defaultInstance;
    public static SnapShot getDefaultInstance() {
      return defaultInstance;
    }

    public SnapShot getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private SnapShot(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      int mutable_bitField1_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              com.google.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000001;
              date_ = bs;
              break;
            }
            case 18: {
              com.google.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000002;
              time_ = bs;
              break;
            }
            case 26: {
              com.baidu.stock.quote.protocbuf.StockBasicProto.StockBasic.Builder subBuilder = null;
              if (((bitField0_ & 0x00000004) == 0x00000004)) {
                subBuilder = stockBasic_.toBuilder();
              }
              stockBasic_ = input.readMessage(com.baidu.stock.quote.protocbuf.StockBasicProto.StockBasic.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(stockBasic_);
                stockBasic_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000004;
              break;
            }
            case 37: {
              bitField0_ |= 0x00000008;
              preClose_ = input.readFloat();
              break;
            }
            case 45: {
              bitField0_ |= 0x00000010;
              high_ = input.readFloat();
              break;
            }
            case 53: {
              bitField0_ |= 0x00000020;
              open_ = input.readFloat();
              break;
            }
            case 61: {
              bitField0_ |= 0x00000040;
              low_ = input.readFloat();
              break;
            }
            case 69: {
              bitField0_ |= 0x00000080;
              close_ = input.readFloat();
              break;
            }
            case 72: {
              bitField0_ |= 0x00000100;
              volume_ = input.readInt64();
              break;
            }
            case 81: {
              bitField0_ |= 0x00000200;
              amount_ = input.readDouble();
              break;
            }
            case 93: {
              bitField0_ |= 0x00000400;
              netChange_ = input.readFloat();
              break;
            }
            case 101: {
              bitField0_ |= 0x00000800;
              netChangeRatio_ = input.readFloat();
              break;
            }
            case 109: {
              bitField0_ |= 0x00001000;
              limitUp_ = input.readFloat();
              break;
            }
            case 117: {
              bitField0_ |= 0x00002000;
              limitDown_ = input.readFloat();
              break;
            }
            case 122: {
              if (!((mutable_bitField0_ & 0x00004000) == 0x00004000)) {
                bid_ = new java.util.ArrayList<com.baidu.stock.quote.protocbuf.BidAskProto.BidAsk>();
                mutable_bitField0_ |= 0x00004000;
              }
              bid_.add(input.readMessage(com.baidu.stock.quote.protocbuf.BidAskProto.BidAsk.PARSER, extensionRegistry));
              break;
            }
            case 130: {
              if (!((mutable_bitField0_ & 0x00008000) == 0x00008000)) {
                ask_ = new java.util.ArrayList<com.baidu.stock.quote.protocbuf.BidAskProto.BidAsk>();
                mutable_bitField0_ |= 0x00008000;
              }
              ask_.add(input.readMessage(com.baidu.stock.quote.protocbuf.BidAskProto.BidAsk.PARSER, extensionRegistry));
              break;
            }
            case 141: {
              bitField0_ |= 0x00004000;
              amplitudeRatio_ = input.readFloat();
              break;
            }
            case 149: {
              bitField0_ |= 0x00008000;
              turnoverRatio_ = input.readFloat();
              break;
            }
            case 153: {
              bitField0_ |= 0x00010000;
              currencyValue_ = input.readDouble();
              break;
            }
            case 161: {
              bitField0_ |= 0x00020000;
              capitalization_ = input.readDouble();
              break;
            }
            case 168: {
              bitField0_ |= 0x00040000;
              dealCount_ = input.readInt32();
              break;
            }
            case 181: {
              bitField0_ |= 0x00080000;
              volumeRatio_ = input.readFloat();
              break;
            }
            case 189: {
              bitField0_ |= 0x00100000;
              weibiRatio_ = input.readFloat();
              break;
            }
            case 197: {
              bitField0_ |= 0x00200000;
              bvRatio_ = input.readFloat();
              break;
            }
            case 205: {
              bitField0_ |= 0x00400000;
              psRatio_ = input.readFloat();
              break;
            }
            case 208: {
              bitField0_ |= 0x00800000;
              nowVol_ = input.readInt64();
              break;
            }
            case 216: {
              bitField0_ |= 0x01000000;
              inside_ = input.readInt32();
              break;
            }
            case 224: {
              bitField0_ |= 0x02000000;
              outside_ = input.readInt32();
              break;
            }
            case 232: {
              bitField0_ |= 0x04000000;
              ccl_ = input.readInt32();
              break;
            }
            case 240: {
              bitField0_ |= 0x08000000;
              riseNum_ = input.readInt32();
              break;
            }
            case 248: {
              bitField0_ |= 0x10000000;
              fairNum_ = input.readInt32();
              break;
            }
            case 256: {
              bitField0_ |= 0x20000000;
              fallNum_ = input.readInt32();
              break;
            }
            case 269: {
              bitField0_ |= 0x40000000;
              weekHigh_ = input.readFloat();
              break;
            }
            case 277: {
              bitField0_ |= 0x80000000;
              weekLow_ = input.readFloat();
              break;
            }
            case 285: {
              bitField1_ |= 0x00000001;
              lyrPeratio_ = input.readFloat();
              break;
            }
            case 293: {
              bitField1_ |= 0x00000002;
              mrqPeratio_ = input.readFloat();
              break;
            }
            case 301: {
              bitField1_ |= 0x00000004;
              ttmPeratio_ = input.readFloat();
              break;
            }
            case 305: {
              bitField1_ |= 0x00000008;
              netFundsFlow_ = input.readDouble();
              break;
            }
            case 317: {
              bitField1_ |= 0x00000010;
              perShareEarn_ = input.readFloat();
              break;
            }
            case 325: {
              bitField1_ |= 0x00000020;
              netAssetsPerShare_ = input.readFloat();
              break;
            }
            case 328: {
              bitField1_ |= 0x00000040;
              totalShareCapital_ = input.readInt64();
              break;
            }
            case 336: {
              bitField1_ |= 0x00000080;
              circulatingCapital_ = input.readInt64();
              break;
            }
            case 344: {
              bitField1_ |= 0x00000100;
              scanTime_ = input.readInt64();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00004000) == 0x00004000)) {
          bid_ = java.util.Collections.unmodifiableList(bid_);
        }
        if (((mutable_bitField0_ & 0x00008000) == 0x00008000)) {
          ask_ = java.util.Collections.unmodifiableList(ask_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.baidu.stock.quote.protocbuf.SnapShotProto.internal_static_com_baidu_stock_quote_protocbuf_SnapShot_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.baidu.stock.quote.protocbuf.SnapShotProto.internal_static_com_baidu_stock_quote_protocbuf_SnapShot_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.baidu.stock.quote.protocbuf.SnapShotProto.SnapShot.class, com.baidu.stock.quote.protocbuf.SnapShotProto.SnapShot.Builder.class);
    }

    public static com.google.protobuf.Parser<SnapShot> PARSER =
        new com.google.protobuf.AbstractParser<SnapShot>() {
      public SnapShot parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new SnapShot(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<SnapShot> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    private int bitField1_;
    public static final int DATE_FIELD_NUMBER = 1;
    private java.lang.Object date_;
    /**
     * <code>required string date = 1;</code>
     *
     * <pre>
     * 日期格式 yyyyMMdd
     * </pre>
     */
    public boolean hasDate() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required string date = 1;</code>
     *
     * <pre>
     * 日期格式 yyyyMMdd
     * </pre>
     */
    public java.lang.String getDate() {
      java.lang.Object ref = date_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          date_ = s;
        }
        return s;
      }
    }
    /**
     * <code>required string date = 1;</code>
     *
     * <pre>
     * 日期格式 yyyyMMdd
     * </pre>
     */
    public com.google.protobuf.ByteString
        getDateBytes() {
      java.lang.Object ref = date_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        date_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int TIME_FIELD_NUMBER = 2;
    private java.lang.Object time_;
    /**
     * <code>required string time = 2;</code>
     *
     * <pre>
     * 时间格式 HHmmss
     * </pre>
     */
    public boolean hasTime() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required string time = 2;</code>
     *
     * <pre>
     * 时间格式 HHmmss
     * </pre>
     */
    public java.lang.String getTime() {
      java.lang.Object ref = time_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          time_ = s;
        }
        return s;
      }
    }
    /**
     * <code>required string time = 2;</code>
     *
     * <pre>
     * 时间格式 HHmmss
     * </pre>
     */
    public com.google.protobuf.ByteString
        getTimeBytes() {
      java.lang.Object ref = time_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        time_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int STOCKBASIC_FIELD_NUMBER = 3;
    private com.baidu.stock.quote.protocbuf.StockBasicProto.StockBasic stockBasic_;
    /**
     * <code>required .com.baidu.stock.quote.protocbuf.StockBasic stockBasic = 3;</code>
     *
     * <pre>
     * 股票信息
     * </pre>
     */
    public boolean hasStockBasic() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>required .com.baidu.stock.quote.protocbuf.StockBasic stockBasic = 3;</code>
     *
     * <pre>
     * 股票信息
     * </pre>
     */
    public com.baidu.stock.quote.protocbuf.StockBasicProto.StockBasic getStockBasic() {
      return stockBasic_;
    }
    /**
     * <code>required .com.baidu.stock.quote.protocbuf.StockBasic stockBasic = 3;</code>
     *
     * <pre>
     * 股票信息
     * </pre>
     */
    public com.baidu.stock.quote.protocbuf.StockBasicProto.StockBasicOrBuilder getStockBasicOrBuilder() {
      return stockBasic_;
    }

    public static final int PRECLOSE_FIELD_NUMBER = 4;
    private float preClose_;
    /**
     * <code>optional float preClose = 4;</code>
     *
     * <pre>
     * 昨收盘价
     * </pre>
     */
    public boolean hasPreClose() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional float preClose = 4;</code>
     *
     * <pre>
     * 昨收盘价
     * </pre>
     */
    public float getPreClose() {
      return preClose_;
    }

    public static final int HIGH_FIELD_NUMBER = 5;
    private float high_;
    /**
     * <code>optional float high = 5;</code>
     *
     * <pre>
     * 最高价
     * </pre>
     */
    public boolean hasHigh() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional float high = 5;</code>
     *
     * <pre>
     * 最高价
     * </pre>
     */
    public float getHigh() {
      return high_;
    }

    public static final int OPEN_FIELD_NUMBER = 6;
    private float open_;
    /**
     * <code>optional float open = 6;</code>
     *
     * <pre>
     * 开盘价
     * </pre>
     */
    public boolean hasOpen() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional float open = 6;</code>
     *
     * <pre>
     * 开盘价
     * </pre>
     */
    public float getOpen() {
      return open_;
    }

    public static final int LOW_FIELD_NUMBER = 7;
    private float low_;
    /**
     * <code>optional float low = 7;</code>
     *
     * <pre>
     * 最低价
     * </pre>
     */
    public boolean hasLow() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional float low = 7;</code>
     *
     * <pre>
     * 最低价
     * </pre>
     */
    public float getLow() {
      return low_;
    }

    public static final int CLOSE_FIELD_NUMBER = 8;
    private float close_;
    /**
     * <code>optional float close = 8;</code>
     *
     * <pre>
     * 今收盘价
     * </pre>
     */
    public boolean hasClose() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>optional float close = 8;</code>
     *
     * <pre>
     * 今收盘价
     * </pre>
     */
    public float getClose() {
      return close_;
    }

    public static final int VOLUME_FIELD_NUMBER = 9;
    private long volume_;
    /**
     * <code>optional int64 volume = 9;</code>
     *
     * <pre>
     * 成交总量 (股)
     * </pre>
     */
    public boolean hasVolume() {
      return ((bitField0_ & 0x00000100) == 0x00000100);
    }
    /**
     * <code>optional int64 volume = 9;</code>
     *
     * <pre>
     * 成交总量 (股)
     * </pre>
     */
    public long getVolume() {
      return volume_;
    }

    public static final int AMOUNT_FIELD_NUMBER = 10;
    private double amount_;
    /**
     * <code>optional double amount = 10;</code>
     *
     * <pre>
     * 成交金额 (元)
     * </pre>
     */
    public boolean hasAmount() {
      return ((bitField0_ & 0x00000200) == 0x00000200);
    }
    /**
     * <code>optional double amount = 10;</code>
     *
     * <pre>
     * 成交金额 (元)
     * </pre>
     */
    public double getAmount() {
      return amount_;
    }

    public static final int NETCHANGE_FIELD_NUMBER = 11;
    private float netChange_;
    /**
     * <code>optional float netChange = 11;</code>
     *
     * <pre>
     * 涨跌额
     * </pre>
     */
    public boolean hasNetChange() {
      return ((bitField0_ & 0x00000400) == 0x00000400);
    }
    /**
     * <code>optional float netChange = 11;</code>
     *
     * <pre>
     * 涨跌额
     * </pre>
     */
    public float getNetChange() {
      return netChange_;
    }

    public static final int NETCHANGERATIO_FIELD_NUMBER = 12;
    private float netChangeRatio_;
    /**
     * <code>optional float netChangeRatio = 12;</code>
     *
     * <pre>
     * 涨跌幅
     * </pre>
     */
    public boolean hasNetChangeRatio() {
      return ((bitField0_ & 0x00000800) == 0x00000800);
    }
    /**
     * <code>optional float netChangeRatio = 12;</code>
     *
     * <pre>
     * 涨跌幅
     * </pre>
     */
    public float getNetChangeRatio() {
      return netChangeRatio_;
    }

    public static final int LIMITUP_FIELD_NUMBER = 13;
    private float limitUp_;
    /**
     * <code>optional float limitUp = 13;</code>
     *
     * <pre>
     * 涨停
     * </pre>
     */
    public boolean hasLimitUp() {
      return ((bitField0_ & 0x00001000) == 0x00001000);
    }
    /**
     * <code>optional float limitUp = 13;</code>
     *
     * <pre>
     * 涨停
     * </pre>
     */
    public float getLimitUp() {
      return limitUp_;
    }

    public static final int LIMITDOWN_FIELD_NUMBER = 14;
    private float limitDown_;
    /**
     * <code>optional float limitDown = 14;</code>
     *
     * <pre>
     * 跌停
     * </pre>
     */
    public boolean hasLimitDown() {
      return ((bitField0_ & 0x00002000) == 0x00002000);
    }
    /**
     * <code>optional float limitDown = 14;</code>
     *
     * <pre>
     * 跌停
     * </pre>
     */
    public float getLimitDown() {
      return limitDown_;
    }

    public static final int BID_FIELD_NUMBER = 15;
    private java.util.List<com.baidu.stock.quote.protocbuf.BidAskProto.BidAsk> bid_;
    /**
     * <code>repeated .com.baidu.stock.quote.protocbuf.BidAsk bid = 15;</code>
     *
     * <pre>
     * 买10档
     * </pre>
     */
    public java.util.List<com.baidu.stock.quote.protocbuf.BidAskProto.BidAsk> getBidList() {
      return bid_;
    }
    /**
     * <code>repeated .com.baidu.stock.quote.protocbuf.BidAsk bid = 15;</code>
     *
     * <pre>
     * 买10档
     * </pre>
     */
    public java.util.List<? extends com.baidu.stock.quote.protocbuf.BidAskProto.BidAskOrBuilder> 
        getBidOrBuilderList() {
      return bid_;
    }
    /**
     * <code>repeated .com.baidu.stock.quote.protocbuf.BidAsk bid = 15;</code>
     *
     * <pre>
     * 买10档
     * </pre>
     */
    public int getBidCount() {
      return bid_.size();
    }
    /**
     * <code>repeated .com.baidu.stock.quote.protocbuf.BidAsk bid = 15;</code>
     *
     * <pre>
     * 买10档
     * </pre>
     */
    public com.baidu.stock.quote.protocbuf.BidAskProto.BidAsk getBid(int index) {
      return bid_.get(index);
    }
    /**
     * <code>repeated .com.baidu.stock.quote.protocbuf.BidAsk bid = 15;</code>
     *
     * <pre>
     * 买10档
     * </pre>
     */
    public com.baidu.stock.quote.protocbuf.BidAskProto.BidAskOrBuilder getBidOrBuilder(
        int index) {
      return bid_.get(index);
    }

    public static final int ASK_FIELD_NUMBER = 16;
    private java.util.List<com.baidu.stock.quote.protocbuf.BidAskProto.BidAsk> ask_;
    /**
     * <code>repeated .com.baidu.stock.quote.protocbuf.BidAsk ask = 16;</code>
     *
     * <pre>
     * 卖10档
     * </pre>
     */
    public java.util.List<com.baidu.stock.quote.protocbuf.BidAskProto.BidAsk> getAskList() {
      return ask_;
    }
    /**
     * <code>repeated .com.baidu.stock.quote.protocbuf.BidAsk ask = 16;</code>
     *
     * <pre>
     * 卖10档
     * </pre>
     */
    public java.util.List<? extends com.baidu.stock.quote.protocbuf.BidAskProto.BidAskOrBuilder> 
        getAskOrBuilderList() {
      return ask_;
    }
    /**
     * <code>repeated .com.baidu.stock.quote.protocbuf.BidAsk ask = 16;</code>
     *
     * <pre>
     * 卖10档
     * </pre>
     */
    public int getAskCount() {
      return ask_.size();
    }
    /**
     * <code>repeated .com.baidu.stock.quote.protocbuf.BidAsk ask = 16;</code>
     *
     * <pre>
     * 卖10档
     * </pre>
     */
    public com.baidu.stock.quote.protocbuf.BidAskProto.BidAsk getAsk(int index) {
      return ask_.get(index);
    }
    /**
     * <code>repeated .com.baidu.stock.quote.protocbuf.BidAsk ask = 16;</code>
     *
     * <pre>
     * 卖10档
     * </pre>
     */
    public com.baidu.stock.quote.protocbuf.BidAskProto.BidAskOrBuilder getAskOrBuilder(
        int index) {
      return ask_.get(index);
    }

    public static final int AMPLITUDERATIO_FIELD_NUMBER = 17;
    private float amplitudeRatio_;
    /**
     * <code>optional float amplitudeRatio = 17;</code>
     *
     * <pre>
     * 振幅
     * </pre>
     */
    public boolean hasAmplitudeRatio() {
      return ((bitField0_ & 0x00004000) == 0x00004000);
    }
    /**
     * <code>optional float amplitudeRatio = 17;</code>
     *
     * <pre>
     * 振幅
     * </pre>
     */
    public float getAmplitudeRatio() {
      return amplitudeRatio_;
    }

    public static final int TURNOVERRATIO_FIELD_NUMBER = 18;
    private float turnoverRatio_;
    /**
     * <code>optional float turnoverRatio = 18;</code>
     *
     * <pre>
     * 换手率
     * </pre>
     */
    public boolean hasTurnoverRatio() {
      return ((bitField0_ & 0x00008000) == 0x00008000);
    }
    /**
     * <code>optional float turnoverRatio = 18;</code>
     *
     * <pre>
     * 换手率
     * </pre>
     */
    public float getTurnoverRatio() {
      return turnoverRatio_;
    }

    public static final int CURRENCYVALUE_FIELD_NUMBER = 19;
    private double currencyValue_;
    /**
     * <code>optional double currencyValue = 19;</code>
     *
     * <pre>
     * 流通市值
     * </pre>
     */
    public boolean hasCurrencyValue() {
      return ((bitField0_ & 0x00010000) == 0x00010000);
    }
    /**
     * <code>optional double currencyValue = 19;</code>
     *
     * <pre>
     * 流通市值
     * </pre>
     */
    public double getCurrencyValue() {
      return currencyValue_;
    }

    public static final int CAPITALIZATION_FIELD_NUMBER = 20;
    private double capitalization_;
    /**
     * <code>optional double capitalization = 20;</code>
     *
     * <pre>
     * 总市值
     * </pre>
     */
    public boolean hasCapitalization() {
      return ((bitField0_ & 0x00020000) == 0x00020000);
    }
    /**
     * <code>optional double capitalization = 20;</code>
     *
     * <pre>
     * 总市值
     * </pre>
     */
    public double getCapitalization() {
      return capitalization_;
    }

    public static final int DEALCOUNT_FIELD_NUMBER = 21;
    private int dealCount_;
    /**
     * <code>optional int32 dealCount = 21;</code>
     *
     * <pre>
     * 成交笔数
     * </pre>
     */
    public boolean hasDealCount() {
      return ((bitField0_ & 0x00040000) == 0x00040000);
    }
    /**
     * <code>optional int32 dealCount = 21;</code>
     *
     * <pre>
     * 成交笔数
     * </pre>
     */
    public int getDealCount() {
      return dealCount_;
    }

    public static final int VOLUMERATIO_FIELD_NUMBER = 22;
    private float volumeRatio_;
    /**
     * <code>optional float volumeRatio = 22;</code>
     *
     * <pre>
     * 量比
     * </pre>
     */
    public boolean hasVolumeRatio() {
      return ((bitField0_ & 0x00080000) == 0x00080000);
    }
    /**
     * <code>optional float volumeRatio = 22;</code>
     *
     * <pre>
     * 量比
     * </pre>
     */
    public float getVolumeRatio() {
      return volumeRatio_;
    }

    public static final int WEIBIRATIO_FIELD_NUMBER = 23;
    private float weibiRatio_;
    /**
     * <code>optional float weibiRatio = 23;</code>
     *
     * <pre>
     * 委比
     * </pre>
     */
    public boolean hasWeibiRatio() {
      return ((bitField0_ & 0x00100000) == 0x00100000);
    }
    /**
     * <code>optional float weibiRatio = 23;</code>
     *
     * <pre>
     * 委比
     * </pre>
     */
    public float getWeibiRatio() {
      return weibiRatio_;
    }

    public static final int BVRATIO_FIELD_NUMBER = 24;
    private float bvRatio_;
    /**
     * <code>optional float bvRatio = 24;</code>
     *
     * <pre>
     * 市净率
     * </pre>
     */
    public boolean hasBvRatio() {
      return ((bitField0_ & 0x00200000) == 0x00200000);
    }
    /**
     * <code>optional float bvRatio = 24;</code>
     *
     * <pre>
     * 市净率
     * </pre>
     */
    public float getBvRatio() {
      return bvRatio_;
    }

    public static final int PSRATIO_FIELD_NUMBER = 25;
    private float psRatio_;
    /**
     * <code>optional float psRatio = 25;</code>
     *
     * <pre>
     * 市销率
     * </pre>
     */
    public boolean hasPsRatio() {
      return ((bitField0_ & 0x00400000) == 0x00400000);
    }
    /**
     * <code>optional float psRatio = 25;</code>
     *
     * <pre>
     * 市销率
     * </pre>
     */
    public float getPsRatio() {
      return psRatio_;
    }

    public static final int NOWVOL_FIELD_NUMBER = 26;
    private long nowVol_;
    /**
     * <code>optional int64 nowVol = 26;</code>
     *
     * <pre>
     * 现量 (当前交易的成交量, 单位: 股)
     * </pre>
     */
    public boolean hasNowVol() {
      return ((bitField0_ & 0x00800000) == 0x00800000);
    }
    /**
     * <code>optional int64 nowVol = 26;</code>
     *
     * <pre>
     * 现量 (当前交易的成交量, 单位: 股)
     * </pre>
     */
    public long getNowVol() {
      return nowVol_;
    }

    public static final int INSIDE_FIELD_NUMBER = 27;
    private int inside_;
    /**
     * <code>optional int32 inside = 27;</code>
     *
     * <pre>
     * 内盘
     * </pre>
     */
    public boolean hasInside() {
      return ((bitField0_ & 0x01000000) == 0x01000000);
    }
    /**
     * <code>optional int32 inside = 27;</code>
     *
     * <pre>
     * 内盘
     * </pre>
     */
    public int getInside() {
      return inside_;
    }

    public static final int OUTSIDE_FIELD_NUMBER = 28;
    private int outside_;
    /**
     * <code>optional int32 outside = 28;</code>
     *
     * <pre>
     * 外盘
     * </pre>
     */
    public boolean hasOutside() {
      return ((bitField0_ & 0x02000000) == 0x02000000);
    }
    /**
     * <code>optional int32 outside = 28;</code>
     *
     * <pre>
     * 外盘
     * </pre>
     */
    public int getOutside() {
      return outside_;
    }

    public static final int CCL_FIELD_NUMBER = 29;
    private int ccl_;
    /**
     * <code>optional int32 ccl = 29;</code>
     *
     * <pre>
     * 持仓量
     * </pre>
     */
    public boolean hasCcl() {
      return ((bitField0_ & 0x04000000) == 0x04000000);
    }
    /**
     * <code>optional int32 ccl = 29;</code>
     *
     * <pre>
     * 持仓量
     * </pre>
     */
    public int getCcl() {
      return ccl_;
    }

    public static final int RISENUM_FIELD_NUMBER = 30;
    private int riseNum_;
    /**
     * <code>optional int32 riseNum = 30;</code>
     *
     * <pre>
     * 涨家数
     * </pre>
     */
    public boolean hasRiseNum() {
      return ((bitField0_ & 0x08000000) == 0x08000000);
    }
    /**
     * <code>optional int32 riseNum = 30;</code>
     *
     * <pre>
     * 涨家数
     * </pre>
     */
    public int getRiseNum() {
      return riseNum_;
    }

    public static final int FAIRNUM_FIELD_NUMBER = 31;
    private int fairNum_;
    /**
     * <code>optional int32 fairNum = 31;</code>
     *
     * <pre>
     * 平家数
     * </pre>
     */
    public boolean hasFairNum() {
      return ((bitField0_ & 0x10000000) == 0x10000000);
    }
    /**
     * <code>optional int32 fairNum = 31;</code>
     *
     * <pre>
     * 平家数
     * </pre>
     */
    public int getFairNum() {
      return fairNum_;
    }

    public static final int FALLNUM_FIELD_NUMBER = 32;
    private int fallNum_;
    /**
     * <code>optional int32 fallNum = 32;</code>
     *
     * <pre>
     * 跌家数
     * </pre>
     */
    public boolean hasFallNum() {
      return ((bitField0_ & 0x20000000) == 0x20000000);
    }
    /**
     * <code>optional int32 fallNum = 32;</code>
     *
     * <pre>
     * 跌家数
     * </pre>
     */
    public int getFallNum() {
      return fallNum_;
    }

    public static final int WEEKHIGH_FIELD_NUMBER = 33;
    private float weekHigh_;
    /**
     * <code>optional float weekHigh = 33;</code>
     *
     * <pre>
     * 52周高
     * </pre>
     */
    public boolean hasWeekHigh() {
      return ((bitField0_ & 0x40000000) == 0x40000000);
    }
    /**
     * <code>optional float weekHigh = 33;</code>
     *
     * <pre>
     * 52周高
     * </pre>
     */
    public float getWeekHigh() {
      return weekHigh_;
    }

    public static final int WEEKLOW_FIELD_NUMBER = 34;
    private float weekLow_;
    /**
     * <code>optional float weekLow = 34;</code>
     *
     * <pre>
     * 52周低
     * </pre>
     */
    public boolean hasWeekLow() {
      return ((bitField0_ & 0x80000000) == 0x80000000);
    }
    /**
     * <code>optional float weekLow = 34;</code>
     *
     * <pre>
     * 52周低
     * </pre>
     */
    public float getWeekLow() {
      return weekLow_;
    }

    public static final int LYRPERATIO_FIELD_NUMBER = 35;
    private float lyrPeratio_;
    /**
     * <code>optional float lyrPeratio = 35;</code>
     *
     * <pre>
     * LYR市盈率
     * </pre>
     */
    public boolean hasLyrPeratio() {
      return ((bitField1_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional float lyrPeratio = 35;</code>
     *
     * <pre>
     * LYR市盈率
     * </pre>
     */
    public float getLyrPeratio() {
      return lyrPeratio_;
    }

    public static final int MRQPERATIO_FIELD_NUMBER = 36;
    private float mrqPeratio_;
    /**
     * <code>optional float mrqPeratio = 36;</code>
     *
     * <pre>
     * mrq市盈率
     * </pre>
     */
    public boolean hasMrqPeratio() {
      return ((bitField1_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional float mrqPeratio = 36;</code>
     *
     * <pre>
     * mrq市盈率
     * </pre>
     */
    public float getMrqPeratio() {
      return mrqPeratio_;
    }

    public static final int TTMPERATIO_FIELD_NUMBER = 37;
    private float ttmPeratio_;
    /**
     * <code>optional float ttmPeratio = 37;</code>
     *
     * <pre>
     * TTM市盈率
     * </pre>
     */
    public boolean hasTtmPeratio() {
      return ((bitField1_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional float ttmPeratio = 37;</code>
     *
     * <pre>
     * TTM市盈率
     * </pre>
     */
    public float getTtmPeratio() {
      return ttmPeratio_;
    }

    public static final int NETFUNDSFLOW_FIELD_NUMBER = 38;
    private double netFundsFlow_;
    /**
     * <code>optional double netFundsFlow = 38;</code>
     *
     * <pre>
     *主力资金净流入
     * </pre>
     */
    public boolean hasNetFundsFlow() {
      return ((bitField1_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional double netFundsFlow = 38;</code>
     *
     * <pre>
     *主力资金净流入
     * </pre>
     */
    public double getNetFundsFlow() {
      return netFundsFlow_;
    }

    public static final int PERSHAREEARN_FIELD_NUMBER = 39;
    private float perShareEarn_;
    /**
     * <code>optional float perShareEarn = 39;</code>
     *
     * <pre>
     *每股收益
     * </pre>
     */
    public boolean hasPerShareEarn() {
      return ((bitField1_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional float perShareEarn = 39;</code>
     *
     * <pre>
     *每股收益
     * </pre>
     */
    public float getPerShareEarn() {
      return perShareEarn_;
    }

    public static final int NETASSETSPERSHARE_FIELD_NUMBER = 40;
    private float netAssetsPerShare_;
    /**
     * <code>optional float netAssetsPerShare = 40;</code>
     *
     * <pre>
     *每股净资产
     * </pre>
     */
    public boolean hasNetAssetsPerShare() {
      return ((bitField1_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional float netAssetsPerShare = 40;</code>
     *
     * <pre>
     *每股净资产
     * </pre>
     */
    public float getNetAssetsPerShare() {
      return netAssetsPerShare_;
    }

    public static final int TOTALSHARECAPITAL_FIELD_NUMBER = 41;
    private long totalShareCapital_;
    /**
     * <code>optional int64 totalShareCapital = 41;</code>
     *
     * <pre>
     *总股本
     * </pre>
     */
    public boolean hasTotalShareCapital() {
      return ((bitField1_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional int64 totalShareCapital = 41;</code>
     *
     * <pre>
     *总股本
     * </pre>
     */
    public long getTotalShareCapital() {
      return totalShareCapital_;
    }

    public static final int CIRCULATINGCAPITAL_FIELD_NUMBER = 42;
    private long circulatingCapital_;
    /**
     * <code>optional int64 circulatingCapital = 42;</code>
     *
     * <pre>
     *流通股本
     * </pre>
     */
    public boolean hasCirculatingCapital() {
      return ((bitField1_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>optional int64 circulatingCapital = 42;</code>
     *
     * <pre>
     *流通股本
     * </pre>
     */
    public long getCirculatingCapital() {
      return circulatingCapital_;
    }

    public static final int SCANTIME_FIELD_NUMBER = 43;
    private long scanTime_;
    /**
     * <code>optional int64 scanTime = 43;</code>
     *
     * <pre>
     *扫描时间 
     * </pre>
     */
    public boolean hasScanTime() {
      return ((bitField1_ & 0x00000100) == 0x00000100);
    }
    /**
     * <code>optional int64 scanTime = 43;</code>
     *
     * <pre>
     *扫描时间 
     * </pre>
     */
    public long getScanTime() {
      return scanTime_;
    }

    private void initFields() {
      date_ = "";
      time_ = "";
      stockBasic_ = com.baidu.stock.quote.protocbuf.StockBasicProto.StockBasic.getDefaultInstance();
      preClose_ = 0F;
      high_ = 0F;
      open_ = 0F;
      low_ = 0F;
      close_ = 0F;
      volume_ = 0L;
      amount_ = 0D;
      netChange_ = 0F;
      netChangeRatio_ = 0F;
      limitUp_ = 0F;
      limitDown_ = 0F;
      bid_ = java.util.Collections.emptyList();
      ask_ = java.util.Collections.emptyList();
      amplitudeRatio_ = 0F;
      turnoverRatio_ = 0F;
      currencyValue_ = 0D;
      capitalization_ = 0D;
      dealCount_ = 0;
      volumeRatio_ = 0F;
      weibiRatio_ = 0F;
      bvRatio_ = 0F;
      psRatio_ = 0F;
      nowVol_ = 0L;
      inside_ = 0;
      outside_ = 0;
      ccl_ = 0;
      riseNum_ = 0;
      fairNum_ = 0;
      fallNum_ = 0;
      weekHigh_ = 0F;
      weekLow_ = 0F;
      lyrPeratio_ = 0F;
      mrqPeratio_ = 0F;
      ttmPeratio_ = 0F;
      netFundsFlow_ = 0D;
      perShareEarn_ = 0F;
      netAssetsPerShare_ = 0F;
      totalShareCapital_ = 0L;
      circulatingCapital_ = 0L;
      scanTime_ = 0L;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasDate()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasTime()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasStockBasic()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!getStockBasic().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      for (int i = 0; i < getBidCount(); i++) {
        if (!getBid(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      for (int i = 0; i < getAskCount(); i++) {
        if (!getAsk(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeBytes(1, getDateBytes());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeBytes(2, getTimeBytes());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeMessage(3, stockBasic_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeFloat(4, preClose_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeFloat(5, high_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeFloat(6, open_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeFloat(7, low_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeFloat(8, close_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        output.writeInt64(9, volume_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        output.writeDouble(10, amount_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        output.writeFloat(11, netChange_);
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        output.writeFloat(12, netChangeRatio_);
      }
      if (((bitField0_ & 0x00001000) == 0x00001000)) {
        output.writeFloat(13, limitUp_);
      }
      if (((bitField0_ & 0x00002000) == 0x00002000)) {
        output.writeFloat(14, limitDown_);
      }
      for (int i = 0; i < bid_.size(); i++) {
        output.writeMessage(15, bid_.get(i));
      }
      for (int i = 0; i < ask_.size(); i++) {
        output.writeMessage(16, ask_.get(i));
      }
      if (((bitField0_ & 0x00004000) == 0x00004000)) {
        output.writeFloat(17, amplitudeRatio_);
      }
      if (((bitField0_ & 0x00008000) == 0x00008000)) {
        output.writeFloat(18, turnoverRatio_);
      }
      if (((bitField0_ & 0x00010000) == 0x00010000)) {
        output.writeDouble(19, currencyValue_);
      }
      if (((bitField0_ & 0x00020000) == 0x00020000)) {
        output.writeDouble(20, capitalization_);
      }
      if (((bitField0_ & 0x00040000) == 0x00040000)) {
        output.writeInt32(21, dealCount_);
      }
      if (((bitField0_ & 0x00080000) == 0x00080000)) {
        output.writeFloat(22, volumeRatio_);
      }
      if (((bitField0_ & 0x00100000) == 0x00100000)) {
        output.writeFloat(23, weibiRatio_);
      }
      if (((bitField0_ & 0x00200000) == 0x00200000)) {
        output.writeFloat(24, bvRatio_);
      }
      if (((bitField0_ & 0x00400000) == 0x00400000)) {
        output.writeFloat(25, psRatio_);
      }
      if (((bitField0_ & 0x00800000) == 0x00800000)) {
        output.writeInt64(26, nowVol_);
      }
      if (((bitField0_ & 0x01000000) == 0x01000000)) {
        output.writeInt32(27, inside_);
      }
      if (((bitField0_ & 0x02000000) == 0x02000000)) {
        output.writeInt32(28, outside_);
      }
      if (((bitField0_ & 0x04000000) == 0x04000000)) {
        output.writeInt32(29, ccl_);
      }
      if (((bitField0_ & 0x08000000) == 0x08000000)) {
        output.writeInt32(30, riseNum_);
      }
      if (((bitField0_ & 0x10000000) == 0x10000000)) {
        output.writeInt32(31, fairNum_);
      }
      if (((bitField0_ & 0x20000000) == 0x20000000)) {
        output.writeInt32(32, fallNum_);
      }
      if (((bitField0_ & 0x40000000) == 0x40000000)) {
        output.writeFloat(33, weekHigh_);
      }
      if (((bitField0_ & 0x80000000) == 0x80000000)) {
        output.writeFloat(34, weekLow_);
      }
      if (((bitField1_ & 0x00000001) == 0x00000001)) {
        output.writeFloat(35, lyrPeratio_);
      }
      if (((bitField1_ & 0x00000002) == 0x00000002)) {
        output.writeFloat(36, mrqPeratio_);
      }
      if (((bitField1_ & 0x00000004) == 0x00000004)) {
        output.writeFloat(37, ttmPeratio_);
      }
      if (((bitField1_ & 0x00000008) == 0x00000008)) {
        output.writeDouble(38, netFundsFlow_);
      }
      if (((bitField1_ & 0x00000010) == 0x00000010)) {
        output.writeFloat(39, perShareEarn_);
      }
      if (((bitField1_ & 0x00000020) == 0x00000020)) {
        output.writeFloat(40, netAssetsPerShare_);
      }
      if (((bitField1_ & 0x00000040) == 0x00000040)) {
        output.writeInt64(41, totalShareCapital_);
      }
      if (((bitField1_ & 0x00000080) == 0x00000080)) {
        output.writeInt64(42, circulatingCapital_);
      }
      if (((bitField1_ & 0x00000100) == 0x00000100)) {
        output.writeInt64(43, scanTime_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(1, getDateBytes());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(2, getTimeBytes());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, stockBasic_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(4, preClose_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(5, high_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(6, open_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(7, low_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(8, close_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(9, volume_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(10, amount_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(11, netChange_);
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(12, netChangeRatio_);
      }
      if (((bitField0_ & 0x00001000) == 0x00001000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(13, limitUp_);
      }
      if (((bitField0_ & 0x00002000) == 0x00002000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(14, limitDown_);
      }
      for (int i = 0; i < bid_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(15, bid_.get(i));
      }
      for (int i = 0; i < ask_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(16, ask_.get(i));
      }
      if (((bitField0_ & 0x00004000) == 0x00004000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(17, amplitudeRatio_);
      }
      if (((bitField0_ & 0x00008000) == 0x00008000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(18, turnoverRatio_);
      }
      if (((bitField0_ & 0x00010000) == 0x00010000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(19, currencyValue_);
      }
      if (((bitField0_ & 0x00020000) == 0x00020000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(20, capitalization_);
      }
      if (((bitField0_ & 0x00040000) == 0x00040000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(21, dealCount_);
      }
      if (((bitField0_ & 0x00080000) == 0x00080000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(22, volumeRatio_);
      }
      if (((bitField0_ & 0x00100000) == 0x00100000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(23, weibiRatio_);
      }
      if (((bitField0_ & 0x00200000) == 0x00200000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(24, bvRatio_);
      }
      if (((bitField0_ & 0x00400000) == 0x00400000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(25, psRatio_);
      }
      if (((bitField0_ & 0x00800000) == 0x00800000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(26, nowVol_);
      }
      if (((bitField0_ & 0x01000000) == 0x01000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(27, inside_);
      }
      if (((bitField0_ & 0x02000000) == 0x02000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(28, outside_);
      }
      if (((bitField0_ & 0x04000000) == 0x04000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(29, ccl_);
      }
      if (((bitField0_ & 0x08000000) == 0x08000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(30, riseNum_);
      }
      if (((bitField0_ & 0x10000000) == 0x10000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(31, fairNum_);
      }
      if (((bitField0_ & 0x20000000) == 0x20000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(32, fallNum_);
      }
      if (((bitField0_ & 0x40000000) == 0x40000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(33, weekHigh_);
      }
      if (((bitField0_ & 0x80000000) == 0x80000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(34, weekLow_);
      }
      if (((bitField1_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(35, lyrPeratio_);
      }
      if (((bitField1_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(36, mrqPeratio_);
      }
      if (((bitField1_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(37, ttmPeratio_);
      }
      if (((bitField1_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(38, netFundsFlow_);
      }
      if (((bitField1_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(39, perShareEarn_);
      }
      if (((bitField1_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(40, netAssetsPerShare_);
      }
      if (((bitField1_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(41, totalShareCapital_);
      }
      if (((bitField1_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(42, circulatingCapital_);
      }
      if (((bitField1_ & 0x00000100) == 0x00000100)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(43, scanTime_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.baidu.stock.quote.protocbuf.SnapShotProto.SnapShot parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.baidu.stock.quote.protocbuf.SnapShotProto.SnapShot parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.baidu.stock.quote.protocbuf.SnapShotProto.SnapShot parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.baidu.stock.quote.protocbuf.SnapShotProto.SnapShot parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.baidu.stock.quote.protocbuf.SnapShotProto.SnapShot parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.baidu.stock.quote.protocbuf.SnapShotProto.SnapShot parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.baidu.stock.quote.protocbuf.SnapShotProto.SnapShot parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.baidu.stock.quote.protocbuf.SnapShotProto.SnapShot parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.baidu.stock.quote.protocbuf.SnapShotProto.SnapShot parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.baidu.stock.quote.protocbuf.SnapShotProto.SnapShot parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.baidu.stock.quote.protocbuf.SnapShotProto.SnapShot prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code com.baidu.stock.quote.protocbuf.SnapShot}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:com.baidu.stock.quote.protocbuf.SnapShot)
        com.baidu.stock.quote.protocbuf.SnapShotProto.SnapShotOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.baidu.stock.quote.protocbuf.SnapShotProto.internal_static_com_baidu_stock_quote_protocbuf_SnapShot_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.baidu.stock.quote.protocbuf.SnapShotProto.internal_static_com_baidu_stock_quote_protocbuf_SnapShot_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.baidu.stock.quote.protocbuf.SnapShotProto.SnapShot.class, com.baidu.stock.quote.protocbuf.SnapShotProto.SnapShot.Builder.class);
      }

      // Construct using com.baidu.stock.quote.protocbuf.SnapShotProto.SnapShot.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getStockBasicFieldBuilder();
          getBidFieldBuilder();
          getAskFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        date_ = "";
        bitField0_ = (bitField0_ & ~0x00000001);
        time_ = "";
        bitField0_ = (bitField0_ & ~0x00000002);
        if (stockBasicBuilder_ == null) {
          stockBasic_ = com.baidu.stock.quote.protocbuf.StockBasicProto.StockBasic.getDefaultInstance();
        } else {
          stockBasicBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000004);
        preClose_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000008);
        high_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000010);
        open_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000020);
        low_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000040);
        close_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000080);
        volume_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000100);
        amount_ = 0D;
        bitField0_ = (bitField0_ & ~0x00000200);
        netChange_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000400);
        netChangeRatio_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000800);
        limitUp_ = 0F;
        bitField0_ = (bitField0_ & ~0x00001000);
        limitDown_ = 0F;
        bitField0_ = (bitField0_ & ~0x00002000);
        if (bidBuilder_ == null) {
          bid_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00004000);
        } else {
          bidBuilder_.clear();
        }
        if (askBuilder_ == null) {
          ask_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00008000);
        } else {
          askBuilder_.clear();
        }
        amplitudeRatio_ = 0F;
        bitField0_ = (bitField0_ & ~0x00010000);
        turnoverRatio_ = 0F;
        bitField0_ = (bitField0_ & ~0x00020000);
        currencyValue_ = 0D;
        bitField0_ = (bitField0_ & ~0x00040000);
        capitalization_ = 0D;
        bitField0_ = (bitField0_ & ~0x00080000);
        dealCount_ = 0;
        bitField0_ = (bitField0_ & ~0x00100000);
        volumeRatio_ = 0F;
        bitField0_ = (bitField0_ & ~0x00200000);
        weibiRatio_ = 0F;
        bitField0_ = (bitField0_ & ~0x00400000);
        bvRatio_ = 0F;
        bitField0_ = (bitField0_ & ~0x00800000);
        psRatio_ = 0F;
        bitField0_ = (bitField0_ & ~0x01000000);
        nowVol_ = 0L;
        bitField0_ = (bitField0_ & ~0x02000000);
        inside_ = 0;
        bitField0_ = (bitField0_ & ~0x04000000);
        outside_ = 0;
        bitField0_ = (bitField0_ & ~0x08000000);
        ccl_ = 0;
        bitField0_ = (bitField0_ & ~0x10000000);
        riseNum_ = 0;
        bitField0_ = (bitField0_ & ~0x20000000);
        fairNum_ = 0;
        bitField0_ = (bitField0_ & ~0x40000000);
        fallNum_ = 0;
        bitField0_ = (bitField0_ & ~0x80000000);
        weekHigh_ = 0F;
        bitField1_ = (bitField1_ & ~0x00000001);
        weekLow_ = 0F;
        bitField1_ = (bitField1_ & ~0x00000002);
        lyrPeratio_ = 0F;
        bitField1_ = (bitField1_ & ~0x00000004);
        mrqPeratio_ = 0F;
        bitField1_ = (bitField1_ & ~0x00000008);
        ttmPeratio_ = 0F;
        bitField1_ = (bitField1_ & ~0x00000010);
        netFundsFlow_ = 0D;
        bitField1_ = (bitField1_ & ~0x00000020);
        perShareEarn_ = 0F;
        bitField1_ = (bitField1_ & ~0x00000040);
        netAssetsPerShare_ = 0F;
        bitField1_ = (bitField1_ & ~0x00000080);
        totalShareCapital_ = 0L;
        bitField1_ = (bitField1_ & ~0x00000100);
        circulatingCapital_ = 0L;
        bitField1_ = (bitField1_ & ~0x00000200);
        scanTime_ = 0L;
        bitField1_ = (bitField1_ & ~0x00000400);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.baidu.stock.quote.protocbuf.SnapShotProto.internal_static_com_baidu_stock_quote_protocbuf_SnapShot_descriptor;
      }

      public com.baidu.stock.quote.protocbuf.SnapShotProto.SnapShot getDefaultInstanceForType() {
        return com.baidu.stock.quote.protocbuf.SnapShotProto.SnapShot.getDefaultInstance();
      }

      public com.baidu.stock.quote.protocbuf.SnapShotProto.SnapShot build() {
        com.baidu.stock.quote.protocbuf.SnapShotProto.SnapShot result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.baidu.stock.quote.protocbuf.SnapShotProto.SnapShot buildPartial() {
        com.baidu.stock.quote.protocbuf.SnapShotProto.SnapShot result = new com.baidu.stock.quote.protocbuf.SnapShotProto.SnapShot(this);
        int from_bitField0_ = bitField0_;
        int from_bitField1_ = bitField1_;
        int to_bitField0_ = 0;
        int to_bitField1_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.date_ = date_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.time_ = time_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        if (stockBasicBuilder_ == null) {
          result.stockBasic_ = stockBasic_;
        } else {
          result.stockBasic_ = stockBasicBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.preClose_ = preClose_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.high_ = high_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        result.open_ = open_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000040;
        }
        result.low_ = low_;
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000080;
        }
        result.close_ = close_;
        if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
          to_bitField0_ |= 0x00000100;
        }
        result.volume_ = volume_;
        if (((from_bitField0_ & 0x00000200) == 0x00000200)) {
          to_bitField0_ |= 0x00000200;
        }
        result.amount_ = amount_;
        if (((from_bitField0_ & 0x00000400) == 0x00000400)) {
          to_bitField0_ |= 0x00000400;
        }
        result.netChange_ = netChange_;
        if (((from_bitField0_ & 0x00000800) == 0x00000800)) {
          to_bitField0_ |= 0x00000800;
        }
        result.netChangeRatio_ = netChangeRatio_;
        if (((from_bitField0_ & 0x00001000) == 0x00001000)) {
          to_bitField0_ |= 0x00001000;
        }
        result.limitUp_ = limitUp_;
        if (((from_bitField0_ & 0x00002000) == 0x00002000)) {
          to_bitField0_ |= 0x00002000;
        }
        result.limitDown_ = limitDown_;
        if (bidBuilder_ == null) {
          if (((bitField0_ & 0x00004000) == 0x00004000)) {
            bid_ = java.util.Collections.unmodifiableList(bid_);
            bitField0_ = (bitField0_ & ~0x00004000);
          }
          result.bid_ = bid_;
        } else {
          result.bid_ = bidBuilder_.build();
        }
        if (askBuilder_ == null) {
          if (((bitField0_ & 0x00008000) == 0x00008000)) {
            ask_ = java.util.Collections.unmodifiableList(ask_);
            bitField0_ = (bitField0_ & ~0x00008000);
          }
          result.ask_ = ask_;
        } else {
          result.ask_ = askBuilder_.build();
        }
        if (((from_bitField0_ & 0x00010000) == 0x00010000)) {
          to_bitField0_ |= 0x00004000;
        }
        result.amplitudeRatio_ = amplitudeRatio_;
        if (((from_bitField0_ & 0x00020000) == 0x00020000)) {
          to_bitField0_ |= 0x00008000;
        }
        result.turnoverRatio_ = turnoverRatio_;
        if (((from_bitField0_ & 0x00040000) == 0x00040000)) {
          to_bitField0_ |= 0x00010000;
        }
        result.currencyValue_ = currencyValue_;
        if (((from_bitField0_ & 0x00080000) == 0x00080000)) {
          to_bitField0_ |= 0x00020000;
        }
        result.capitalization_ = capitalization_;
        if (((from_bitField0_ & 0x00100000) == 0x00100000)) {
          to_bitField0_ |= 0x00040000;
        }
        result.dealCount_ = dealCount_;
        if (((from_bitField0_ & 0x00200000) == 0x00200000)) {
          to_bitField0_ |= 0x00080000;
        }
        result.volumeRatio_ = volumeRatio_;
        if (((from_bitField0_ & 0x00400000) == 0x00400000)) {
          to_bitField0_ |= 0x00100000;
        }
        result.weibiRatio_ = weibiRatio_;
        if (((from_bitField0_ & 0x00800000) == 0x00800000)) {
          to_bitField0_ |= 0x00200000;
        }
        result.bvRatio_ = bvRatio_;
        if (((from_bitField0_ & 0x01000000) == 0x01000000)) {
          to_bitField0_ |= 0x00400000;
        }
        result.psRatio_ = psRatio_;
        if (((from_bitField0_ & 0x02000000) == 0x02000000)) {
          to_bitField0_ |= 0x00800000;
        }
        result.nowVol_ = nowVol_;
        if (((from_bitField0_ & 0x04000000) == 0x04000000)) {
          to_bitField0_ |= 0x01000000;
        }
        result.inside_ = inside_;
        if (((from_bitField0_ & 0x08000000) == 0x08000000)) {
          to_bitField0_ |= 0x02000000;
        }
        result.outside_ = outside_;
        if (((from_bitField0_ & 0x10000000) == 0x10000000)) {
          to_bitField0_ |= 0x04000000;
        }
        result.ccl_ = ccl_;
        if (((from_bitField0_ & 0x20000000) == 0x20000000)) {
          to_bitField0_ |= 0x08000000;
        }
        result.riseNum_ = riseNum_;
        if (((from_bitField0_ & 0x40000000) == 0x40000000)) {
          to_bitField0_ |= 0x10000000;
        }
        result.fairNum_ = fairNum_;
        if (((from_bitField0_ & 0x80000000) == 0x80000000)) {
          to_bitField0_ |= 0x20000000;
        }
        result.fallNum_ = fallNum_;
        if (((from_bitField1_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x40000000;
        }
        result.weekHigh_ = weekHigh_;
        if (((from_bitField1_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x80000000;
        }
        result.weekLow_ = weekLow_;
        if (((from_bitField1_ & 0x00000004) == 0x00000004)) {
          to_bitField1_ |= 0x00000001;
        }
        result.lyrPeratio_ = lyrPeratio_;
        if (((from_bitField1_ & 0x00000008) == 0x00000008)) {
          to_bitField1_ |= 0x00000002;
        }
        result.mrqPeratio_ = mrqPeratio_;
        if (((from_bitField1_ & 0x00000010) == 0x00000010)) {
          to_bitField1_ |= 0x00000004;
        }
        result.ttmPeratio_ = ttmPeratio_;
        if (((from_bitField1_ & 0x00000020) == 0x00000020)) {
          to_bitField1_ |= 0x00000008;
        }
        result.netFundsFlow_ = netFundsFlow_;
        if (((from_bitField1_ & 0x00000040) == 0x00000040)) {
          to_bitField1_ |= 0x00000010;
        }
        result.perShareEarn_ = perShareEarn_;
        if (((from_bitField1_ & 0x00000080) == 0x00000080)) {
          to_bitField1_ |= 0x00000020;
        }
        result.netAssetsPerShare_ = netAssetsPerShare_;
        if (((from_bitField1_ & 0x00000100) == 0x00000100)) {
          to_bitField1_ |= 0x00000040;
        }
        result.totalShareCapital_ = totalShareCapital_;
        if (((from_bitField1_ & 0x00000200) == 0x00000200)) {
          to_bitField1_ |= 0x00000080;
        }
        result.circulatingCapital_ = circulatingCapital_;
        if (((from_bitField1_ & 0x00000400) == 0x00000400)) {
          to_bitField1_ |= 0x00000100;
        }
        result.scanTime_ = scanTime_;
        result.bitField0_ = to_bitField0_;
        result.bitField1_ = to_bitField1_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.baidu.stock.quote.protocbuf.SnapShotProto.SnapShot) {
          return mergeFrom((com.baidu.stock.quote.protocbuf.SnapShotProto.SnapShot)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.baidu.stock.quote.protocbuf.SnapShotProto.SnapShot other) {
        if (other == com.baidu.stock.quote.protocbuf.SnapShotProto.SnapShot.getDefaultInstance()) return this;
        if (other.hasDate()) {
          bitField0_ |= 0x00000001;
          date_ = other.date_;
          onChanged();
        }
        if (other.hasTime()) {
          bitField0_ |= 0x00000002;
          time_ = other.time_;
          onChanged();
        }
        if (other.hasStockBasic()) {
          mergeStockBasic(other.getStockBasic());
        }
        if (other.hasPreClose()) {
          setPreClose(other.getPreClose());
        }
        if (other.hasHigh()) {
          setHigh(other.getHigh());
        }
        if (other.hasOpen()) {
          setOpen(other.getOpen());
        }
        if (other.hasLow()) {
          setLow(other.getLow());
        }
        if (other.hasClose()) {
          setClose(other.getClose());
        }
        if (other.hasVolume()) {
          setVolume(other.getVolume());
        }
        if (other.hasAmount()) {
          setAmount(other.getAmount());
        }
        if (other.hasNetChange()) {
          setNetChange(other.getNetChange());
        }
        if (other.hasNetChangeRatio()) {
          setNetChangeRatio(other.getNetChangeRatio());
        }
        if (other.hasLimitUp()) {
          setLimitUp(other.getLimitUp());
        }
        if (other.hasLimitDown()) {
          setLimitDown(other.getLimitDown());
        }
        if (bidBuilder_ == null) {
          if (!other.bid_.isEmpty()) {
            if (bid_.isEmpty()) {
              bid_ = other.bid_;
              bitField0_ = (bitField0_ & ~0x00004000);
            } else {
              ensureBidIsMutable();
              bid_.addAll(other.bid_);
            }
            onChanged();
          }
        } else {
          if (!other.bid_.isEmpty()) {
            if (bidBuilder_.isEmpty()) {
              bidBuilder_.dispose();
              bidBuilder_ = null;
              bid_ = other.bid_;
              bitField0_ = (bitField0_ & ~0x00004000);
              bidBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getBidFieldBuilder() : null;
            } else {
              bidBuilder_.addAllMessages(other.bid_);
            }
          }
        }
        if (askBuilder_ == null) {
          if (!other.ask_.isEmpty()) {
            if (ask_.isEmpty()) {
              ask_ = other.ask_;
              bitField0_ = (bitField0_ & ~0x00008000);
            } else {
              ensureAskIsMutable();
              ask_.addAll(other.ask_);
            }
            onChanged();
          }
        } else {
          if (!other.ask_.isEmpty()) {
            if (askBuilder_.isEmpty()) {
              askBuilder_.dispose();
              askBuilder_ = null;
              ask_ = other.ask_;
              bitField0_ = (bitField0_ & ~0x00008000);
              askBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getAskFieldBuilder() : null;
            } else {
              askBuilder_.addAllMessages(other.ask_);
            }
          }
        }
        if (other.hasAmplitudeRatio()) {
          setAmplitudeRatio(other.getAmplitudeRatio());
        }
        if (other.hasTurnoverRatio()) {
          setTurnoverRatio(other.getTurnoverRatio());
        }
        if (other.hasCurrencyValue()) {
          setCurrencyValue(other.getCurrencyValue());
        }
        if (other.hasCapitalization()) {
          setCapitalization(other.getCapitalization());
        }
        if (other.hasDealCount()) {
          setDealCount(other.getDealCount());
        }
        if (other.hasVolumeRatio()) {
          setVolumeRatio(other.getVolumeRatio());
        }
        if (other.hasWeibiRatio()) {
          setWeibiRatio(other.getWeibiRatio());
        }
        if (other.hasBvRatio()) {
          setBvRatio(other.getBvRatio());
        }
        if (other.hasPsRatio()) {
          setPsRatio(other.getPsRatio());
        }
        if (other.hasNowVol()) {
          setNowVol(other.getNowVol());
        }
        if (other.hasInside()) {
          setInside(other.getInside());
        }
        if (other.hasOutside()) {
          setOutside(other.getOutside());
        }
        if (other.hasCcl()) {
          setCcl(other.getCcl());
        }
        if (other.hasRiseNum()) {
          setRiseNum(other.getRiseNum());
        }
        if (other.hasFairNum()) {
          setFairNum(other.getFairNum());
        }
        if (other.hasFallNum()) {
          setFallNum(other.getFallNum());
        }
        if (other.hasWeekHigh()) {
          setWeekHigh(other.getWeekHigh());
        }
        if (other.hasWeekLow()) {
          setWeekLow(other.getWeekLow());
        }
        if (other.hasLyrPeratio()) {
          setLyrPeratio(other.getLyrPeratio());
        }
        if (other.hasMrqPeratio()) {
          setMrqPeratio(other.getMrqPeratio());
        }
        if (other.hasTtmPeratio()) {
          setTtmPeratio(other.getTtmPeratio());
        }
        if (other.hasNetFundsFlow()) {
          setNetFundsFlow(other.getNetFundsFlow());
        }
        if (other.hasPerShareEarn()) {
          setPerShareEarn(other.getPerShareEarn());
        }
        if (other.hasNetAssetsPerShare()) {
          setNetAssetsPerShare(other.getNetAssetsPerShare());
        }
        if (other.hasTotalShareCapital()) {
          setTotalShareCapital(other.getTotalShareCapital());
        }
        if (other.hasCirculatingCapital()) {
          setCirculatingCapital(other.getCirculatingCapital());
        }
        if (other.hasScanTime()) {
          setScanTime(other.getScanTime());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasDate()) {
          
          return false;
        }
        if (!hasTime()) {
          
          return false;
        }
        if (!hasStockBasic()) {
          
          return false;
        }
        if (!getStockBasic().isInitialized()) {
          
          return false;
        }
        for (int i = 0; i < getBidCount(); i++) {
          if (!getBid(i).isInitialized()) {
            
            return false;
          }
        }
        for (int i = 0; i < getAskCount(); i++) {
          if (!getAsk(i).isInitialized()) {
            
            return false;
          }
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.baidu.stock.quote.protocbuf.SnapShotProto.SnapShot parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.baidu.stock.quote.protocbuf.SnapShotProto.SnapShot) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;
      private int bitField1_;

      private java.lang.Object date_ = "";
      /**
       * <code>required string date = 1;</code>
       *
       * <pre>
       * 日期格式 yyyyMMdd
       * </pre>
       */
      public boolean hasDate() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required string date = 1;</code>
       *
       * <pre>
       * 日期格式 yyyyMMdd
       * </pre>
       */
      public java.lang.String getDate() {
        java.lang.Object ref = date_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            date_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>required string date = 1;</code>
       *
       * <pre>
       * 日期格式 yyyyMMdd
       * </pre>
       */
      public com.google.protobuf.ByteString
          getDateBytes() {
        java.lang.Object ref = date_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          date_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>required string date = 1;</code>
       *
       * <pre>
       * 日期格式 yyyyMMdd
       * </pre>
       */
      public Builder setDate(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        date_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required string date = 1;</code>
       *
       * <pre>
       * 日期格式 yyyyMMdd
       * </pre>
       */
      public Builder clearDate() {
        bitField0_ = (bitField0_ & ~0x00000001);
        date_ = getDefaultInstance().getDate();
        onChanged();
        return this;
      }
      /**
       * <code>required string date = 1;</code>
       *
       * <pre>
       * 日期格式 yyyyMMdd
       * </pre>
       */
      public Builder setDateBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        date_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object time_ = "";
      /**
       * <code>required string time = 2;</code>
       *
       * <pre>
       * 时间格式 HHmmss
       * </pre>
       */
      public boolean hasTime() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required string time = 2;</code>
       *
       * <pre>
       * 时间格式 HHmmss
       * </pre>
       */
      public java.lang.String getTime() {
        java.lang.Object ref = time_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            time_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>required string time = 2;</code>
       *
       * <pre>
       * 时间格式 HHmmss
       * </pre>
       */
      public com.google.protobuf.ByteString
          getTimeBytes() {
        java.lang.Object ref = time_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          time_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>required string time = 2;</code>
       *
       * <pre>
       * 时间格式 HHmmss
       * </pre>
       */
      public Builder setTime(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        time_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required string time = 2;</code>
       *
       * <pre>
       * 时间格式 HHmmss
       * </pre>
       */
      public Builder clearTime() {
        bitField0_ = (bitField0_ & ~0x00000002);
        time_ = getDefaultInstance().getTime();
        onChanged();
        return this;
      }
      /**
       * <code>required string time = 2;</code>
       *
       * <pre>
       * 时间格式 HHmmss
       * </pre>
       */
      public Builder setTimeBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        time_ = value;
        onChanged();
        return this;
      }

      private com.baidu.stock.quote.protocbuf.StockBasicProto.StockBasic stockBasic_ = com.baidu.stock.quote.protocbuf.StockBasicProto.StockBasic.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          com.baidu.stock.quote.protocbuf.StockBasicProto.StockBasic, com.baidu.stock.quote.protocbuf.StockBasicProto.StockBasic.Builder, com.baidu.stock.quote.protocbuf.StockBasicProto.StockBasicOrBuilder> stockBasicBuilder_;
      /**
       * <code>required .com.baidu.stock.quote.protocbuf.StockBasic stockBasic = 3;</code>
       *
       * <pre>
       * 股票信息
       * </pre>
       */
      public boolean hasStockBasic() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>required .com.baidu.stock.quote.protocbuf.StockBasic stockBasic = 3;</code>
       *
       * <pre>
       * 股票信息
       * </pre>
       */
      public com.baidu.stock.quote.protocbuf.StockBasicProto.StockBasic getStockBasic() {
        if (stockBasicBuilder_ == null) {
          return stockBasic_;
        } else {
          return stockBasicBuilder_.getMessage();
        }
      }
      /**
       * <code>required .com.baidu.stock.quote.protocbuf.StockBasic stockBasic = 3;</code>
       *
       * <pre>
       * 股票信息
       * </pre>
       */
      public Builder setStockBasic(com.baidu.stock.quote.protocbuf.StockBasicProto.StockBasic value) {
        if (stockBasicBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          stockBasic_ = value;
          onChanged();
        } else {
          stockBasicBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000004;
        return this;
      }
      /**
       * <code>required .com.baidu.stock.quote.protocbuf.StockBasic stockBasic = 3;</code>
       *
       * <pre>
       * 股票信息
       * </pre>
       */
      public Builder setStockBasic(
          com.baidu.stock.quote.protocbuf.StockBasicProto.StockBasic.Builder builderForValue) {
        if (stockBasicBuilder_ == null) {
          stockBasic_ = builderForValue.build();
          onChanged();
        } else {
          stockBasicBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000004;
        return this;
      }
      /**
       * <code>required .com.baidu.stock.quote.protocbuf.StockBasic stockBasic = 3;</code>
       *
       * <pre>
       * 股票信息
       * </pre>
       */
      public Builder mergeStockBasic(com.baidu.stock.quote.protocbuf.StockBasicProto.StockBasic value) {
        if (stockBasicBuilder_ == null) {
          if (((bitField0_ & 0x00000004) == 0x00000004) &&
              stockBasic_ != com.baidu.stock.quote.protocbuf.StockBasicProto.StockBasic.getDefaultInstance()) {
            stockBasic_ =
              com.baidu.stock.quote.protocbuf.StockBasicProto.StockBasic.newBuilder(stockBasic_).mergeFrom(value).buildPartial();
          } else {
            stockBasic_ = value;
          }
          onChanged();
        } else {
          stockBasicBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000004;
        return this;
      }
      /**
       * <code>required .com.baidu.stock.quote.protocbuf.StockBasic stockBasic = 3;</code>
       *
       * <pre>
       * 股票信息
       * </pre>
       */
      public Builder clearStockBasic() {
        if (stockBasicBuilder_ == null) {
          stockBasic_ = com.baidu.stock.quote.protocbuf.StockBasicProto.StockBasic.getDefaultInstance();
          onChanged();
        } else {
          stockBasicBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }
      /**
       * <code>required .com.baidu.stock.quote.protocbuf.StockBasic stockBasic = 3;</code>
       *
       * <pre>
       * 股票信息
       * </pre>
       */
      public com.baidu.stock.quote.protocbuf.StockBasicProto.StockBasic.Builder getStockBasicBuilder() {
        bitField0_ |= 0x00000004;
        onChanged();
        return getStockBasicFieldBuilder().getBuilder();
      }
      /**
       * <code>required .com.baidu.stock.quote.protocbuf.StockBasic stockBasic = 3;</code>
       *
       * <pre>
       * 股票信息
       * </pre>
       */
      public com.baidu.stock.quote.protocbuf.StockBasicProto.StockBasicOrBuilder getStockBasicOrBuilder() {
        if (stockBasicBuilder_ != null) {
          return stockBasicBuilder_.getMessageOrBuilder();
        } else {
          return stockBasic_;
        }
      }
      /**
       * <code>required .com.baidu.stock.quote.protocbuf.StockBasic stockBasic = 3;</code>
       *
       * <pre>
       * 股票信息
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          com.baidu.stock.quote.protocbuf.StockBasicProto.StockBasic, com.baidu.stock.quote.protocbuf.StockBasicProto.StockBasic.Builder, com.baidu.stock.quote.protocbuf.StockBasicProto.StockBasicOrBuilder> 
          getStockBasicFieldBuilder() {
        if (stockBasicBuilder_ == null) {
          stockBasicBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              com.baidu.stock.quote.protocbuf.StockBasicProto.StockBasic, com.baidu.stock.quote.protocbuf.StockBasicProto.StockBasic.Builder, com.baidu.stock.quote.protocbuf.StockBasicProto.StockBasicOrBuilder>(
                  getStockBasic(),
                  getParentForChildren(),
                  isClean());
          stockBasic_ = null;
        }
        return stockBasicBuilder_;
      }

      private float preClose_ ;
      /**
       * <code>optional float preClose = 4;</code>
       *
       * <pre>
       * 昨收盘价
       * </pre>
       */
      public boolean hasPreClose() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional float preClose = 4;</code>
       *
       * <pre>
       * 昨收盘价
       * </pre>
       */
      public float getPreClose() {
        return preClose_;
      }
      /**
       * <code>optional float preClose = 4;</code>
       *
       * <pre>
       * 昨收盘价
       * </pre>
       */
      public Builder setPreClose(float value) {
        bitField0_ |= 0x00000008;
        preClose_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float preClose = 4;</code>
       *
       * <pre>
       * 昨收盘价
       * </pre>
       */
      public Builder clearPreClose() {
        bitField0_ = (bitField0_ & ~0x00000008);
        preClose_ = 0F;
        onChanged();
        return this;
      }

      private float high_ ;
      /**
       * <code>optional float high = 5;</code>
       *
       * <pre>
       * 最高价
       * </pre>
       */
      public boolean hasHigh() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional float high = 5;</code>
       *
       * <pre>
       * 最高价
       * </pre>
       */
      public float getHigh() {
        return high_;
      }
      /**
       * <code>optional float high = 5;</code>
       *
       * <pre>
       * 最高价
       * </pre>
       */
      public Builder setHigh(float value) {
        bitField0_ |= 0x00000010;
        high_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float high = 5;</code>
       *
       * <pre>
       * 最高价
       * </pre>
       */
      public Builder clearHigh() {
        bitField0_ = (bitField0_ & ~0x00000010);
        high_ = 0F;
        onChanged();
        return this;
      }

      private float open_ ;
      /**
       * <code>optional float open = 6;</code>
       *
       * <pre>
       * 开盘价
       * </pre>
       */
      public boolean hasOpen() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional float open = 6;</code>
       *
       * <pre>
       * 开盘价
       * </pre>
       */
      public float getOpen() {
        return open_;
      }
      /**
       * <code>optional float open = 6;</code>
       *
       * <pre>
       * 开盘价
       * </pre>
       */
      public Builder setOpen(float value) {
        bitField0_ |= 0x00000020;
        open_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float open = 6;</code>
       *
       * <pre>
       * 开盘价
       * </pre>
       */
      public Builder clearOpen() {
        bitField0_ = (bitField0_ & ~0x00000020);
        open_ = 0F;
        onChanged();
        return this;
      }

      private float low_ ;
      /**
       * <code>optional float low = 7;</code>
       *
       * <pre>
       * 最低价
       * </pre>
       */
      public boolean hasLow() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>optional float low = 7;</code>
       *
       * <pre>
       * 最低价
       * </pre>
       */
      public float getLow() {
        return low_;
      }
      /**
       * <code>optional float low = 7;</code>
       *
       * <pre>
       * 最低价
       * </pre>
       */
      public Builder setLow(float value) {
        bitField0_ |= 0x00000040;
        low_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float low = 7;</code>
       *
       * <pre>
       * 最低价
       * </pre>
       */
      public Builder clearLow() {
        bitField0_ = (bitField0_ & ~0x00000040);
        low_ = 0F;
        onChanged();
        return this;
      }

      private float close_ ;
      /**
       * <code>optional float close = 8;</code>
       *
       * <pre>
       * 今收盘价
       * </pre>
       */
      public boolean hasClose() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      /**
       * <code>optional float close = 8;</code>
       *
       * <pre>
       * 今收盘价
       * </pre>
       */
      public float getClose() {
        return close_;
      }
      /**
       * <code>optional float close = 8;</code>
       *
       * <pre>
       * 今收盘价
       * </pre>
       */
      public Builder setClose(float value) {
        bitField0_ |= 0x00000080;
        close_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float close = 8;</code>
       *
       * <pre>
       * 今收盘价
       * </pre>
       */
      public Builder clearClose() {
        bitField0_ = (bitField0_ & ~0x00000080);
        close_ = 0F;
        onChanged();
        return this;
      }

      private long volume_ ;
      /**
       * <code>optional int64 volume = 9;</code>
       *
       * <pre>
       * 成交总量 (股)
       * </pre>
       */
      public boolean hasVolume() {
        return ((bitField0_ & 0x00000100) == 0x00000100);
      }
      /**
       * <code>optional int64 volume = 9;</code>
       *
       * <pre>
       * 成交总量 (股)
       * </pre>
       */
      public long getVolume() {
        return volume_;
      }
      /**
       * <code>optional int64 volume = 9;</code>
       *
       * <pre>
       * 成交总量 (股)
       * </pre>
       */
      public Builder setVolume(long value) {
        bitField0_ |= 0x00000100;
        volume_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int64 volume = 9;</code>
       *
       * <pre>
       * 成交总量 (股)
       * </pre>
       */
      public Builder clearVolume() {
        bitField0_ = (bitField0_ & ~0x00000100);
        volume_ = 0L;
        onChanged();
        return this;
      }

      private double amount_ ;
      /**
       * <code>optional double amount = 10;</code>
       *
       * <pre>
       * 成交金额 (元)
       * </pre>
       */
      public boolean hasAmount() {
        return ((bitField0_ & 0x00000200) == 0x00000200);
      }
      /**
       * <code>optional double amount = 10;</code>
       *
       * <pre>
       * 成交金额 (元)
       * </pre>
       */
      public double getAmount() {
        return amount_;
      }
      /**
       * <code>optional double amount = 10;</code>
       *
       * <pre>
       * 成交金额 (元)
       * </pre>
       */
      public Builder setAmount(double value) {
        bitField0_ |= 0x00000200;
        amount_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional double amount = 10;</code>
       *
       * <pre>
       * 成交金额 (元)
       * </pre>
       */
      public Builder clearAmount() {
        bitField0_ = (bitField0_ & ~0x00000200);
        amount_ = 0D;
        onChanged();
        return this;
      }

      private float netChange_ ;
      /**
       * <code>optional float netChange = 11;</code>
       *
       * <pre>
       * 涨跌额
       * </pre>
       */
      public boolean hasNetChange() {
        return ((bitField0_ & 0x00000400) == 0x00000400);
      }
      /**
       * <code>optional float netChange = 11;</code>
       *
       * <pre>
       * 涨跌额
       * </pre>
       */
      public float getNetChange() {
        return netChange_;
      }
      /**
       * <code>optional float netChange = 11;</code>
       *
       * <pre>
       * 涨跌额
       * </pre>
       */
      public Builder setNetChange(float value) {
        bitField0_ |= 0x00000400;
        netChange_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float netChange = 11;</code>
       *
       * <pre>
       * 涨跌额
       * </pre>
       */
      public Builder clearNetChange() {
        bitField0_ = (bitField0_ & ~0x00000400);
        netChange_ = 0F;
        onChanged();
        return this;
      }

      private float netChangeRatio_ ;
      /**
       * <code>optional float netChangeRatio = 12;</code>
       *
       * <pre>
       * 涨跌幅
       * </pre>
       */
      public boolean hasNetChangeRatio() {
        return ((bitField0_ & 0x00000800) == 0x00000800);
      }
      /**
       * <code>optional float netChangeRatio = 12;</code>
       *
       * <pre>
       * 涨跌幅
       * </pre>
       */
      public float getNetChangeRatio() {
        return netChangeRatio_;
      }
      /**
       * <code>optional float netChangeRatio = 12;</code>
       *
       * <pre>
       * 涨跌幅
       * </pre>
       */
      public Builder setNetChangeRatio(float value) {
        bitField0_ |= 0x00000800;
        netChangeRatio_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float netChangeRatio = 12;</code>
       *
       * <pre>
       * 涨跌幅
       * </pre>
       */
      public Builder clearNetChangeRatio() {
        bitField0_ = (bitField0_ & ~0x00000800);
        netChangeRatio_ = 0F;
        onChanged();
        return this;
      }

      private float limitUp_ ;
      /**
       * <code>optional float limitUp = 13;</code>
       *
       * <pre>
       * 涨停
       * </pre>
       */
      public boolean hasLimitUp() {
        return ((bitField0_ & 0x00001000) == 0x00001000);
      }
      /**
       * <code>optional float limitUp = 13;</code>
       *
       * <pre>
       * 涨停
       * </pre>
       */
      public float getLimitUp() {
        return limitUp_;
      }
      /**
       * <code>optional float limitUp = 13;</code>
       *
       * <pre>
       * 涨停
       * </pre>
       */
      public Builder setLimitUp(float value) {
        bitField0_ |= 0x00001000;
        limitUp_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float limitUp = 13;</code>
       *
       * <pre>
       * 涨停
       * </pre>
       */
      public Builder clearLimitUp() {
        bitField0_ = (bitField0_ & ~0x00001000);
        limitUp_ = 0F;
        onChanged();
        return this;
      }

      private float limitDown_ ;
      /**
       * <code>optional float limitDown = 14;</code>
       *
       * <pre>
       * 跌停
       * </pre>
       */
      public boolean hasLimitDown() {
        return ((bitField0_ & 0x00002000) == 0x00002000);
      }
      /**
       * <code>optional float limitDown = 14;</code>
       *
       * <pre>
       * 跌停
       * </pre>
       */
      public float getLimitDown() {
        return limitDown_;
      }
      /**
       * <code>optional float limitDown = 14;</code>
       *
       * <pre>
       * 跌停
       * </pre>
       */
      public Builder setLimitDown(float value) {
        bitField0_ |= 0x00002000;
        limitDown_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float limitDown = 14;</code>
       *
       * <pre>
       * 跌停
       * </pre>
       */
      public Builder clearLimitDown() {
        bitField0_ = (bitField0_ & ~0x00002000);
        limitDown_ = 0F;
        onChanged();
        return this;
      }

      private java.util.List<com.baidu.stock.quote.protocbuf.BidAskProto.BidAsk> bid_ =
        java.util.Collections.emptyList();
      private void ensureBidIsMutable() {
        if (!((bitField0_ & 0x00004000) == 0x00004000)) {
          bid_ = new java.util.ArrayList<com.baidu.stock.quote.protocbuf.BidAskProto.BidAsk>(bid_);
          bitField0_ |= 0x00004000;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          com.baidu.stock.quote.protocbuf.BidAskProto.BidAsk, com.baidu.stock.quote.protocbuf.BidAskProto.BidAsk.Builder, com.baidu.stock.quote.protocbuf.BidAskProto.BidAskOrBuilder> bidBuilder_;

      /**
       * <code>repeated .com.baidu.stock.quote.protocbuf.BidAsk bid = 15;</code>
       *
       * <pre>
       * 买10档
       * </pre>
       */
      public java.util.List<com.baidu.stock.quote.protocbuf.BidAskProto.BidAsk> getBidList() {
        if (bidBuilder_ == null) {
          return java.util.Collections.unmodifiableList(bid_);
        } else {
          return bidBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .com.baidu.stock.quote.protocbuf.BidAsk bid = 15;</code>
       *
       * <pre>
       * 买10档
       * </pre>
       */
      public int getBidCount() {
        if (bidBuilder_ == null) {
          return bid_.size();
        } else {
          return bidBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .com.baidu.stock.quote.protocbuf.BidAsk bid = 15;</code>
       *
       * <pre>
       * 买10档
       * </pre>
       */
      public com.baidu.stock.quote.protocbuf.BidAskProto.BidAsk getBid(int index) {
        if (bidBuilder_ == null) {
          return bid_.get(index);
        } else {
          return bidBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .com.baidu.stock.quote.protocbuf.BidAsk bid = 15;</code>
       *
       * <pre>
       * 买10档
       * </pre>
       */
      public Builder setBid(
          int index, com.baidu.stock.quote.protocbuf.BidAskProto.BidAsk value) {
        if (bidBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureBidIsMutable();
          bid_.set(index, value);
          onChanged();
        } else {
          bidBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .com.baidu.stock.quote.protocbuf.BidAsk bid = 15;</code>
       *
       * <pre>
       * 买10档
       * </pre>
       */
      public Builder setBid(
          int index, com.baidu.stock.quote.protocbuf.BidAskProto.BidAsk.Builder builderForValue) {
        if (bidBuilder_ == null) {
          ensureBidIsMutable();
          bid_.set(index, builderForValue.build());
          onChanged();
        } else {
          bidBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .com.baidu.stock.quote.protocbuf.BidAsk bid = 15;</code>
       *
       * <pre>
       * 买10档
       * </pre>
       */
      public Builder addBid(com.baidu.stock.quote.protocbuf.BidAskProto.BidAsk value) {
        if (bidBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureBidIsMutable();
          bid_.add(value);
          onChanged();
        } else {
          bidBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .com.baidu.stock.quote.protocbuf.BidAsk bid = 15;</code>
       *
       * <pre>
       * 买10档
       * </pre>
       */
      public Builder addBid(
          int index, com.baidu.stock.quote.protocbuf.BidAskProto.BidAsk value) {
        if (bidBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureBidIsMutable();
          bid_.add(index, value);
          onChanged();
        } else {
          bidBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .com.baidu.stock.quote.protocbuf.BidAsk bid = 15;</code>
       *
       * <pre>
       * 买10档
       * </pre>
       */
      public Builder addBid(
          com.baidu.stock.quote.protocbuf.BidAskProto.BidAsk.Builder builderForValue) {
        if (bidBuilder_ == null) {
          ensureBidIsMutable();
          bid_.add(builderForValue.build());
          onChanged();
        } else {
          bidBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .com.baidu.stock.quote.protocbuf.BidAsk bid = 15;</code>
       *
       * <pre>
       * 买10档
       * </pre>
       */
      public Builder addBid(
          int index, com.baidu.stock.quote.protocbuf.BidAskProto.BidAsk.Builder builderForValue) {
        if (bidBuilder_ == null) {
          ensureBidIsMutable();
          bid_.add(index, builderForValue.build());
          onChanged();
        } else {
          bidBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .com.baidu.stock.quote.protocbuf.BidAsk bid = 15;</code>
       *
       * <pre>
       * 买10档
       * </pre>
       */
      public Builder addAllBid(
          java.lang.Iterable<? extends com.baidu.stock.quote.protocbuf.BidAskProto.BidAsk> values) {
        if (bidBuilder_ == null) {
          ensureBidIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, bid_);
          onChanged();
        } else {
          bidBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .com.baidu.stock.quote.protocbuf.BidAsk bid = 15;</code>
       *
       * <pre>
       * 买10档
       * </pre>
       */
      public Builder clearBid() {
        if (bidBuilder_ == null) {
          bid_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00004000);
          onChanged();
        } else {
          bidBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .com.baidu.stock.quote.protocbuf.BidAsk bid = 15;</code>
       *
       * <pre>
       * 买10档
       * </pre>
       */
      public Builder removeBid(int index) {
        if (bidBuilder_ == null) {
          ensureBidIsMutable();
          bid_.remove(index);
          onChanged();
        } else {
          bidBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .com.baidu.stock.quote.protocbuf.BidAsk bid = 15;</code>
       *
       * <pre>
       * 买10档
       * </pre>
       */
      public com.baidu.stock.quote.protocbuf.BidAskProto.BidAsk.Builder getBidBuilder(
          int index) {
        return getBidFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .com.baidu.stock.quote.protocbuf.BidAsk bid = 15;</code>
       *
       * <pre>
       * 买10档
       * </pre>
       */
      public com.baidu.stock.quote.protocbuf.BidAskProto.BidAskOrBuilder getBidOrBuilder(
          int index) {
        if (bidBuilder_ == null) {
          return bid_.get(index);  } else {
          return bidBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .com.baidu.stock.quote.protocbuf.BidAsk bid = 15;</code>
       *
       * <pre>
       * 买10档
       * </pre>
       */
      public java.util.List<? extends com.baidu.stock.quote.protocbuf.BidAskProto.BidAskOrBuilder> 
           getBidOrBuilderList() {
        if (bidBuilder_ != null) {
          return bidBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(bid_);
        }
      }
      /**
       * <code>repeated .com.baidu.stock.quote.protocbuf.BidAsk bid = 15;</code>
       *
       * <pre>
       * 买10档
       * </pre>
       */
      public com.baidu.stock.quote.protocbuf.BidAskProto.BidAsk.Builder addBidBuilder() {
        return getBidFieldBuilder().addBuilder(
            com.baidu.stock.quote.protocbuf.BidAskProto.BidAsk.getDefaultInstance());
      }
      /**
       * <code>repeated .com.baidu.stock.quote.protocbuf.BidAsk bid = 15;</code>
       *
       * <pre>
       * 买10档
       * </pre>
       */
      public com.baidu.stock.quote.protocbuf.BidAskProto.BidAsk.Builder addBidBuilder(
          int index) {
        return getBidFieldBuilder().addBuilder(
            index, com.baidu.stock.quote.protocbuf.BidAskProto.BidAsk.getDefaultInstance());
      }
      /**
       * <code>repeated .com.baidu.stock.quote.protocbuf.BidAsk bid = 15;</code>
       *
       * <pre>
       * 买10档
       * </pre>
       */
      public java.util.List<com.baidu.stock.quote.protocbuf.BidAskProto.BidAsk.Builder> 
           getBidBuilderList() {
        return getBidFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          com.baidu.stock.quote.protocbuf.BidAskProto.BidAsk, com.baidu.stock.quote.protocbuf.BidAskProto.BidAsk.Builder, com.baidu.stock.quote.protocbuf.BidAskProto.BidAskOrBuilder> 
          getBidFieldBuilder() {
        if (bidBuilder_ == null) {
          bidBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              com.baidu.stock.quote.protocbuf.BidAskProto.BidAsk, com.baidu.stock.quote.protocbuf.BidAskProto.BidAsk.Builder, com.baidu.stock.quote.protocbuf.BidAskProto.BidAskOrBuilder>(
                  bid_,
                  ((bitField0_ & 0x00004000) == 0x00004000),
                  getParentForChildren(),
                  isClean());
          bid_ = null;
        }
        return bidBuilder_;
      }

      private java.util.List<com.baidu.stock.quote.protocbuf.BidAskProto.BidAsk> ask_ =
        java.util.Collections.emptyList();
      private void ensureAskIsMutable() {
        if (!((bitField0_ & 0x00008000) == 0x00008000)) {
          ask_ = new java.util.ArrayList<com.baidu.stock.quote.protocbuf.BidAskProto.BidAsk>(ask_);
          bitField0_ |= 0x00008000;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          com.baidu.stock.quote.protocbuf.BidAskProto.BidAsk, com.baidu.stock.quote.protocbuf.BidAskProto.BidAsk.Builder, com.baidu.stock.quote.protocbuf.BidAskProto.BidAskOrBuilder> askBuilder_;

      /**
       * <code>repeated .com.baidu.stock.quote.protocbuf.BidAsk ask = 16;</code>
       *
       * <pre>
       * 卖10档
       * </pre>
       */
      public java.util.List<com.baidu.stock.quote.protocbuf.BidAskProto.BidAsk> getAskList() {
        if (askBuilder_ == null) {
          return java.util.Collections.unmodifiableList(ask_);
        } else {
          return askBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .com.baidu.stock.quote.protocbuf.BidAsk ask = 16;</code>
       *
       * <pre>
       * 卖10档
       * </pre>
       */
      public int getAskCount() {
        if (askBuilder_ == null) {
          return ask_.size();
        } else {
          return askBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .com.baidu.stock.quote.protocbuf.BidAsk ask = 16;</code>
       *
       * <pre>
       * 卖10档
       * </pre>
       */
      public com.baidu.stock.quote.protocbuf.BidAskProto.BidAsk getAsk(int index) {
        if (askBuilder_ == null) {
          return ask_.get(index);
        } else {
          return askBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .com.baidu.stock.quote.protocbuf.BidAsk ask = 16;</code>
       *
       * <pre>
       * 卖10档
       * </pre>
       */
      public Builder setAsk(
          int index, com.baidu.stock.quote.protocbuf.BidAskProto.BidAsk value) {
        if (askBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureAskIsMutable();
          ask_.set(index, value);
          onChanged();
        } else {
          askBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .com.baidu.stock.quote.protocbuf.BidAsk ask = 16;</code>
       *
       * <pre>
       * 卖10档
       * </pre>
       */
      public Builder setAsk(
          int index, com.baidu.stock.quote.protocbuf.BidAskProto.BidAsk.Builder builderForValue) {
        if (askBuilder_ == null) {
          ensureAskIsMutable();
          ask_.set(index, builderForValue.build());
          onChanged();
        } else {
          askBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .com.baidu.stock.quote.protocbuf.BidAsk ask = 16;</code>
       *
       * <pre>
       * 卖10档
       * </pre>
       */
      public Builder addAsk(com.baidu.stock.quote.protocbuf.BidAskProto.BidAsk value) {
        if (askBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureAskIsMutable();
          ask_.add(value);
          onChanged();
        } else {
          askBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .com.baidu.stock.quote.protocbuf.BidAsk ask = 16;</code>
       *
       * <pre>
       * 卖10档
       * </pre>
       */
      public Builder addAsk(
          int index, com.baidu.stock.quote.protocbuf.BidAskProto.BidAsk value) {
        if (askBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureAskIsMutable();
          ask_.add(index, value);
          onChanged();
        } else {
          askBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .com.baidu.stock.quote.protocbuf.BidAsk ask = 16;</code>
       *
       * <pre>
       * 卖10档
       * </pre>
       */
      public Builder addAsk(
          com.baidu.stock.quote.protocbuf.BidAskProto.BidAsk.Builder builderForValue) {
        if (askBuilder_ == null) {
          ensureAskIsMutable();
          ask_.add(builderForValue.build());
          onChanged();
        } else {
          askBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .com.baidu.stock.quote.protocbuf.BidAsk ask = 16;</code>
       *
       * <pre>
       * 卖10档
       * </pre>
       */
      public Builder addAsk(
          int index, com.baidu.stock.quote.protocbuf.BidAskProto.BidAsk.Builder builderForValue) {
        if (askBuilder_ == null) {
          ensureAskIsMutable();
          ask_.add(index, builderForValue.build());
          onChanged();
        } else {
          askBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .com.baidu.stock.quote.protocbuf.BidAsk ask = 16;</code>
       *
       * <pre>
       * 卖10档
       * </pre>
       */
      public Builder addAllAsk(
          java.lang.Iterable<? extends com.baidu.stock.quote.protocbuf.BidAskProto.BidAsk> values) {
        if (askBuilder_ == null) {
          ensureAskIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, ask_);
          onChanged();
        } else {
          askBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .com.baidu.stock.quote.protocbuf.BidAsk ask = 16;</code>
       *
       * <pre>
       * 卖10档
       * </pre>
       */
      public Builder clearAsk() {
        if (askBuilder_ == null) {
          ask_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00008000);
          onChanged();
        } else {
          askBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .com.baidu.stock.quote.protocbuf.BidAsk ask = 16;</code>
       *
       * <pre>
       * 卖10档
       * </pre>
       */
      public Builder removeAsk(int index) {
        if (askBuilder_ == null) {
          ensureAskIsMutable();
          ask_.remove(index);
          onChanged();
        } else {
          askBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .com.baidu.stock.quote.protocbuf.BidAsk ask = 16;</code>
       *
       * <pre>
       * 卖10档
       * </pre>
       */
      public com.baidu.stock.quote.protocbuf.BidAskProto.BidAsk.Builder getAskBuilder(
          int index) {
        return getAskFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .com.baidu.stock.quote.protocbuf.BidAsk ask = 16;</code>
       *
       * <pre>
       * 卖10档
       * </pre>
       */
      public com.baidu.stock.quote.protocbuf.BidAskProto.BidAskOrBuilder getAskOrBuilder(
          int index) {
        if (askBuilder_ == null) {
          return ask_.get(index);  } else {
          return askBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .com.baidu.stock.quote.protocbuf.BidAsk ask = 16;</code>
       *
       * <pre>
       * 卖10档
       * </pre>
       */
      public java.util.List<? extends com.baidu.stock.quote.protocbuf.BidAskProto.BidAskOrBuilder> 
           getAskOrBuilderList() {
        if (askBuilder_ != null) {
          return askBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(ask_);
        }
      }
      /**
       * <code>repeated .com.baidu.stock.quote.protocbuf.BidAsk ask = 16;</code>
       *
       * <pre>
       * 卖10档
       * </pre>
       */
      public com.baidu.stock.quote.protocbuf.BidAskProto.BidAsk.Builder addAskBuilder() {
        return getAskFieldBuilder().addBuilder(
            com.baidu.stock.quote.protocbuf.BidAskProto.BidAsk.getDefaultInstance());
      }
      /**
       * <code>repeated .com.baidu.stock.quote.protocbuf.BidAsk ask = 16;</code>
       *
       * <pre>
       * 卖10档
       * </pre>
       */
      public com.baidu.stock.quote.protocbuf.BidAskProto.BidAsk.Builder addAskBuilder(
          int index) {
        return getAskFieldBuilder().addBuilder(
            index, com.baidu.stock.quote.protocbuf.BidAskProto.BidAsk.getDefaultInstance());
      }
      /**
       * <code>repeated .com.baidu.stock.quote.protocbuf.BidAsk ask = 16;</code>
       *
       * <pre>
       * 卖10档
       * </pre>
       */
      public java.util.List<com.baidu.stock.quote.protocbuf.BidAskProto.BidAsk.Builder> 
           getAskBuilderList() {
        return getAskFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          com.baidu.stock.quote.protocbuf.BidAskProto.BidAsk, com.baidu.stock.quote.protocbuf.BidAskProto.BidAsk.Builder, com.baidu.stock.quote.protocbuf.BidAskProto.BidAskOrBuilder> 
          getAskFieldBuilder() {
        if (askBuilder_ == null) {
          askBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              com.baidu.stock.quote.protocbuf.BidAskProto.BidAsk, com.baidu.stock.quote.protocbuf.BidAskProto.BidAsk.Builder, com.baidu.stock.quote.protocbuf.BidAskProto.BidAskOrBuilder>(
                  ask_,
                  ((bitField0_ & 0x00008000) == 0x00008000),
                  getParentForChildren(),
                  isClean());
          ask_ = null;
        }
        return askBuilder_;
      }

      private float amplitudeRatio_ ;
      /**
       * <code>optional float amplitudeRatio = 17;</code>
       *
       * <pre>
       * 振幅
       * </pre>
       */
      public boolean hasAmplitudeRatio() {
        return ((bitField0_ & 0x00010000) == 0x00010000);
      }
      /**
       * <code>optional float amplitudeRatio = 17;</code>
       *
       * <pre>
       * 振幅
       * </pre>
       */
      public float getAmplitudeRatio() {
        return amplitudeRatio_;
      }
      /**
       * <code>optional float amplitudeRatio = 17;</code>
       *
       * <pre>
       * 振幅
       * </pre>
       */
      public Builder setAmplitudeRatio(float value) {
        bitField0_ |= 0x00010000;
        amplitudeRatio_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float amplitudeRatio = 17;</code>
       *
       * <pre>
       * 振幅
       * </pre>
       */
      public Builder clearAmplitudeRatio() {
        bitField0_ = (bitField0_ & ~0x00010000);
        amplitudeRatio_ = 0F;
        onChanged();
        return this;
      }

      private float turnoverRatio_ ;
      /**
       * <code>optional float turnoverRatio = 18;</code>
       *
       * <pre>
       * 换手率
       * </pre>
       */
      public boolean hasTurnoverRatio() {
        return ((bitField0_ & 0x00020000) == 0x00020000);
      }
      /**
       * <code>optional float turnoverRatio = 18;</code>
       *
       * <pre>
       * 换手率
       * </pre>
       */
      public float getTurnoverRatio() {
        return turnoverRatio_;
      }
      /**
       * <code>optional float turnoverRatio = 18;</code>
       *
       * <pre>
       * 换手率
       * </pre>
       */
      public Builder setTurnoverRatio(float value) {
        bitField0_ |= 0x00020000;
        turnoverRatio_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float turnoverRatio = 18;</code>
       *
       * <pre>
       * 换手率
       * </pre>
       */
      public Builder clearTurnoverRatio() {
        bitField0_ = (bitField0_ & ~0x00020000);
        turnoverRatio_ = 0F;
        onChanged();
        return this;
      }

      private double currencyValue_ ;
      /**
       * <code>optional double currencyValue = 19;</code>
       *
       * <pre>
       * 流通市值
       * </pre>
       */
      public boolean hasCurrencyValue() {
        return ((bitField0_ & 0x00040000) == 0x00040000);
      }
      /**
       * <code>optional double currencyValue = 19;</code>
       *
       * <pre>
       * 流通市值
       * </pre>
       */
      public double getCurrencyValue() {
        return currencyValue_;
      }
      /**
       * <code>optional double currencyValue = 19;</code>
       *
       * <pre>
       * 流通市值
       * </pre>
       */
      public Builder setCurrencyValue(double value) {
        bitField0_ |= 0x00040000;
        currencyValue_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional double currencyValue = 19;</code>
       *
       * <pre>
       * 流通市值
       * </pre>
       */
      public Builder clearCurrencyValue() {
        bitField0_ = (bitField0_ & ~0x00040000);
        currencyValue_ = 0D;
        onChanged();
        return this;
      }

      private double capitalization_ ;
      /**
       * <code>optional double capitalization = 20;</code>
       *
       * <pre>
       * 总市值
       * </pre>
       */
      public boolean hasCapitalization() {
        return ((bitField0_ & 0x00080000) == 0x00080000);
      }
      /**
       * <code>optional double capitalization = 20;</code>
       *
       * <pre>
       * 总市值
       * </pre>
       */
      public double getCapitalization() {
        return capitalization_;
      }
      /**
       * <code>optional double capitalization = 20;</code>
       *
       * <pre>
       * 总市值
       * </pre>
       */
      public Builder setCapitalization(double value) {
        bitField0_ |= 0x00080000;
        capitalization_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional double capitalization = 20;</code>
       *
       * <pre>
       * 总市值
       * </pre>
       */
      public Builder clearCapitalization() {
        bitField0_ = (bitField0_ & ~0x00080000);
        capitalization_ = 0D;
        onChanged();
        return this;
      }

      private int dealCount_ ;
      /**
       * <code>optional int32 dealCount = 21;</code>
       *
       * <pre>
       * 成交笔数
       * </pre>
       */
      public boolean hasDealCount() {
        return ((bitField0_ & 0x00100000) == 0x00100000);
      }
      /**
       * <code>optional int32 dealCount = 21;</code>
       *
       * <pre>
       * 成交笔数
       * </pre>
       */
      public int getDealCount() {
        return dealCount_;
      }
      /**
       * <code>optional int32 dealCount = 21;</code>
       *
       * <pre>
       * 成交笔数
       * </pre>
       */
      public Builder setDealCount(int value) {
        bitField0_ |= 0x00100000;
        dealCount_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 dealCount = 21;</code>
       *
       * <pre>
       * 成交笔数
       * </pre>
       */
      public Builder clearDealCount() {
        bitField0_ = (bitField0_ & ~0x00100000);
        dealCount_ = 0;
        onChanged();
        return this;
      }

      private float volumeRatio_ ;
      /**
       * <code>optional float volumeRatio = 22;</code>
       *
       * <pre>
       * 量比
       * </pre>
       */
      public boolean hasVolumeRatio() {
        return ((bitField0_ & 0x00200000) == 0x00200000);
      }
      /**
       * <code>optional float volumeRatio = 22;</code>
       *
       * <pre>
       * 量比
       * </pre>
       */
      public float getVolumeRatio() {
        return volumeRatio_;
      }
      /**
       * <code>optional float volumeRatio = 22;</code>
       *
       * <pre>
       * 量比
       * </pre>
       */
      public Builder setVolumeRatio(float value) {
        bitField0_ |= 0x00200000;
        volumeRatio_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float volumeRatio = 22;</code>
       *
       * <pre>
       * 量比
       * </pre>
       */
      public Builder clearVolumeRatio() {
        bitField0_ = (bitField0_ & ~0x00200000);
        volumeRatio_ = 0F;
        onChanged();
        return this;
      }

      private float weibiRatio_ ;
      /**
       * <code>optional float weibiRatio = 23;</code>
       *
       * <pre>
       * 委比
       * </pre>
       */
      public boolean hasWeibiRatio() {
        return ((bitField0_ & 0x00400000) == 0x00400000);
      }
      /**
       * <code>optional float weibiRatio = 23;</code>
       *
       * <pre>
       * 委比
       * </pre>
       */
      public float getWeibiRatio() {
        return weibiRatio_;
      }
      /**
       * <code>optional float weibiRatio = 23;</code>
       *
       * <pre>
       * 委比
       * </pre>
       */
      public Builder setWeibiRatio(float value) {
        bitField0_ |= 0x00400000;
        weibiRatio_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float weibiRatio = 23;</code>
       *
       * <pre>
       * 委比
       * </pre>
       */
      public Builder clearWeibiRatio() {
        bitField0_ = (bitField0_ & ~0x00400000);
        weibiRatio_ = 0F;
        onChanged();
        return this;
      }

      private float bvRatio_ ;
      /**
       * <code>optional float bvRatio = 24;</code>
       *
       * <pre>
       * 市净率
       * </pre>
       */
      public boolean hasBvRatio() {
        return ((bitField0_ & 0x00800000) == 0x00800000);
      }
      /**
       * <code>optional float bvRatio = 24;</code>
       *
       * <pre>
       * 市净率
       * </pre>
       */
      public float getBvRatio() {
        return bvRatio_;
      }
      /**
       * <code>optional float bvRatio = 24;</code>
       *
       * <pre>
       * 市净率
       * </pre>
       */
      public Builder setBvRatio(float value) {
        bitField0_ |= 0x00800000;
        bvRatio_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float bvRatio = 24;</code>
       *
       * <pre>
       * 市净率
       * </pre>
       */
      public Builder clearBvRatio() {
        bitField0_ = (bitField0_ & ~0x00800000);
        bvRatio_ = 0F;
        onChanged();
        return this;
      }

      private float psRatio_ ;
      /**
       * <code>optional float psRatio = 25;</code>
       *
       * <pre>
       * 市销率
       * </pre>
       */
      public boolean hasPsRatio() {
        return ((bitField0_ & 0x01000000) == 0x01000000);
      }
      /**
       * <code>optional float psRatio = 25;</code>
       *
       * <pre>
       * 市销率
       * </pre>
       */
      public float getPsRatio() {
        return psRatio_;
      }
      /**
       * <code>optional float psRatio = 25;</code>
       *
       * <pre>
       * 市销率
       * </pre>
       */
      public Builder setPsRatio(float value) {
        bitField0_ |= 0x01000000;
        psRatio_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float psRatio = 25;</code>
       *
       * <pre>
       * 市销率
       * </pre>
       */
      public Builder clearPsRatio() {
        bitField0_ = (bitField0_ & ~0x01000000);
        psRatio_ = 0F;
        onChanged();
        return this;
      }

      private long nowVol_ ;
      /**
       * <code>optional int64 nowVol = 26;</code>
       *
       * <pre>
       * 现量 (当前交易的成交量, 单位: 股)
       * </pre>
       */
      public boolean hasNowVol() {
        return ((bitField0_ & 0x02000000) == 0x02000000);
      }
      /**
       * <code>optional int64 nowVol = 26;</code>
       *
       * <pre>
       * 现量 (当前交易的成交量, 单位: 股)
       * </pre>
       */
      public long getNowVol() {
        return nowVol_;
      }
      /**
       * <code>optional int64 nowVol = 26;</code>
       *
       * <pre>
       * 现量 (当前交易的成交量, 单位: 股)
       * </pre>
       */
      public Builder setNowVol(long value) {
        bitField0_ |= 0x02000000;
        nowVol_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int64 nowVol = 26;</code>
       *
       * <pre>
       * 现量 (当前交易的成交量, 单位: 股)
       * </pre>
       */
      public Builder clearNowVol() {
        bitField0_ = (bitField0_ & ~0x02000000);
        nowVol_ = 0L;
        onChanged();
        return this;
      }

      private int inside_ ;
      /**
       * <code>optional int32 inside = 27;</code>
       *
       * <pre>
       * 内盘
       * </pre>
       */
      public boolean hasInside() {
        return ((bitField0_ & 0x04000000) == 0x04000000);
      }
      /**
       * <code>optional int32 inside = 27;</code>
       *
       * <pre>
       * 内盘
       * </pre>
       */
      public int getInside() {
        return inside_;
      }
      /**
       * <code>optional int32 inside = 27;</code>
       *
       * <pre>
       * 内盘
       * </pre>
       */
      public Builder setInside(int value) {
        bitField0_ |= 0x04000000;
        inside_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 inside = 27;</code>
       *
       * <pre>
       * 内盘
       * </pre>
       */
      public Builder clearInside() {
        bitField0_ = (bitField0_ & ~0x04000000);
        inside_ = 0;
        onChanged();
        return this;
      }

      private int outside_ ;
      /**
       * <code>optional int32 outside = 28;</code>
       *
       * <pre>
       * 外盘
       * </pre>
       */
      public boolean hasOutside() {
        return ((bitField0_ & 0x08000000) == 0x08000000);
      }
      /**
       * <code>optional int32 outside = 28;</code>
       *
       * <pre>
       * 外盘
       * </pre>
       */
      public int getOutside() {
        return outside_;
      }
      /**
       * <code>optional int32 outside = 28;</code>
       *
       * <pre>
       * 外盘
       * </pre>
       */
      public Builder setOutside(int value) {
        bitField0_ |= 0x08000000;
        outside_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 outside = 28;</code>
       *
       * <pre>
       * 外盘
       * </pre>
       */
      public Builder clearOutside() {
        bitField0_ = (bitField0_ & ~0x08000000);
        outside_ = 0;
        onChanged();
        return this;
      }

      private int ccl_ ;
      /**
       * <code>optional int32 ccl = 29;</code>
       *
       * <pre>
       * 持仓量
       * </pre>
       */
      public boolean hasCcl() {
        return ((bitField0_ & 0x10000000) == 0x10000000);
      }
      /**
       * <code>optional int32 ccl = 29;</code>
       *
       * <pre>
       * 持仓量
       * </pre>
       */
      public int getCcl() {
        return ccl_;
      }
      /**
       * <code>optional int32 ccl = 29;</code>
       *
       * <pre>
       * 持仓量
       * </pre>
       */
      public Builder setCcl(int value) {
        bitField0_ |= 0x10000000;
        ccl_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 ccl = 29;</code>
       *
       * <pre>
       * 持仓量
       * </pre>
       */
      public Builder clearCcl() {
        bitField0_ = (bitField0_ & ~0x10000000);
        ccl_ = 0;
        onChanged();
        return this;
      }

      private int riseNum_ ;
      /**
       * <code>optional int32 riseNum = 30;</code>
       *
       * <pre>
       * 涨家数
       * </pre>
       */
      public boolean hasRiseNum() {
        return ((bitField0_ & 0x20000000) == 0x20000000);
      }
      /**
       * <code>optional int32 riseNum = 30;</code>
       *
       * <pre>
       * 涨家数
       * </pre>
       */
      public int getRiseNum() {
        return riseNum_;
      }
      /**
       * <code>optional int32 riseNum = 30;</code>
       *
       * <pre>
       * 涨家数
       * </pre>
       */
      public Builder setRiseNum(int value) {
        bitField0_ |= 0x20000000;
        riseNum_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 riseNum = 30;</code>
       *
       * <pre>
       * 涨家数
       * </pre>
       */
      public Builder clearRiseNum() {
        bitField0_ = (bitField0_ & ~0x20000000);
        riseNum_ = 0;
        onChanged();
        return this;
      }

      private int fairNum_ ;
      /**
       * <code>optional int32 fairNum = 31;</code>
       *
       * <pre>
       * 平家数
       * </pre>
       */
      public boolean hasFairNum() {
        return ((bitField0_ & 0x40000000) == 0x40000000);
      }
      /**
       * <code>optional int32 fairNum = 31;</code>
       *
       * <pre>
       * 平家数
       * </pre>
       */
      public int getFairNum() {
        return fairNum_;
      }
      /**
       * <code>optional int32 fairNum = 31;</code>
       *
       * <pre>
       * 平家数
       * </pre>
       */
      public Builder setFairNum(int value) {
        bitField0_ |= 0x40000000;
        fairNum_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 fairNum = 31;</code>
       *
       * <pre>
       * 平家数
       * </pre>
       */
      public Builder clearFairNum() {
        bitField0_ = (bitField0_ & ~0x40000000);
        fairNum_ = 0;
        onChanged();
        return this;
      }

      private int fallNum_ ;
      /**
       * <code>optional int32 fallNum = 32;</code>
       *
       * <pre>
       * 跌家数
       * </pre>
       */
      public boolean hasFallNum() {
        return ((bitField0_ & 0x80000000) == 0x80000000);
      }
      /**
       * <code>optional int32 fallNum = 32;</code>
       *
       * <pre>
       * 跌家数
       * </pre>
       */
      public int getFallNum() {
        return fallNum_;
      }
      /**
       * <code>optional int32 fallNum = 32;</code>
       *
       * <pre>
       * 跌家数
       * </pre>
       */
      public Builder setFallNum(int value) {
        bitField0_ |= 0x80000000;
        fallNum_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 fallNum = 32;</code>
       *
       * <pre>
       * 跌家数
       * </pre>
       */
      public Builder clearFallNum() {
        bitField0_ = (bitField0_ & ~0x80000000);
        fallNum_ = 0;
        onChanged();
        return this;
      }

      private float weekHigh_ ;
      /**
       * <code>optional float weekHigh = 33;</code>
       *
       * <pre>
       * 52周高
       * </pre>
       */
      public boolean hasWeekHigh() {
        return ((bitField1_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional float weekHigh = 33;</code>
       *
       * <pre>
       * 52周高
       * </pre>
       */
      public float getWeekHigh() {
        return weekHigh_;
      }
      /**
       * <code>optional float weekHigh = 33;</code>
       *
       * <pre>
       * 52周高
       * </pre>
       */
      public Builder setWeekHigh(float value) {
        bitField1_ |= 0x00000001;
        weekHigh_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float weekHigh = 33;</code>
       *
       * <pre>
       * 52周高
       * </pre>
       */
      public Builder clearWeekHigh() {
        bitField1_ = (bitField1_ & ~0x00000001);
        weekHigh_ = 0F;
        onChanged();
        return this;
      }

      private float weekLow_ ;
      /**
       * <code>optional float weekLow = 34;</code>
       *
       * <pre>
       * 52周低
       * </pre>
       */
      public boolean hasWeekLow() {
        return ((bitField1_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional float weekLow = 34;</code>
       *
       * <pre>
       * 52周低
       * </pre>
       */
      public float getWeekLow() {
        return weekLow_;
      }
      /**
       * <code>optional float weekLow = 34;</code>
       *
       * <pre>
       * 52周低
       * </pre>
       */
      public Builder setWeekLow(float value) {
        bitField1_ |= 0x00000002;
        weekLow_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float weekLow = 34;</code>
       *
       * <pre>
       * 52周低
       * </pre>
       */
      public Builder clearWeekLow() {
        bitField1_ = (bitField1_ & ~0x00000002);
        weekLow_ = 0F;
        onChanged();
        return this;
      }

      private float lyrPeratio_ ;
      /**
       * <code>optional float lyrPeratio = 35;</code>
       *
       * <pre>
       * LYR市盈率
       * </pre>
       */
      public boolean hasLyrPeratio() {
        return ((bitField1_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional float lyrPeratio = 35;</code>
       *
       * <pre>
       * LYR市盈率
       * </pre>
       */
      public float getLyrPeratio() {
        return lyrPeratio_;
      }
      /**
       * <code>optional float lyrPeratio = 35;</code>
       *
       * <pre>
       * LYR市盈率
       * </pre>
       */
      public Builder setLyrPeratio(float value) {
        bitField1_ |= 0x00000004;
        lyrPeratio_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float lyrPeratio = 35;</code>
       *
       * <pre>
       * LYR市盈率
       * </pre>
       */
      public Builder clearLyrPeratio() {
        bitField1_ = (bitField1_ & ~0x00000004);
        lyrPeratio_ = 0F;
        onChanged();
        return this;
      }

      private float mrqPeratio_ ;
      /**
       * <code>optional float mrqPeratio = 36;</code>
       *
       * <pre>
       * mrq市盈率
       * </pre>
       */
      public boolean hasMrqPeratio() {
        return ((bitField1_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional float mrqPeratio = 36;</code>
       *
       * <pre>
       * mrq市盈率
       * </pre>
       */
      public float getMrqPeratio() {
        return mrqPeratio_;
      }
      /**
       * <code>optional float mrqPeratio = 36;</code>
       *
       * <pre>
       * mrq市盈率
       * </pre>
       */
      public Builder setMrqPeratio(float value) {
        bitField1_ |= 0x00000008;
        mrqPeratio_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float mrqPeratio = 36;</code>
       *
       * <pre>
       * mrq市盈率
       * </pre>
       */
      public Builder clearMrqPeratio() {
        bitField1_ = (bitField1_ & ~0x00000008);
        mrqPeratio_ = 0F;
        onChanged();
        return this;
      }

      private float ttmPeratio_ ;
      /**
       * <code>optional float ttmPeratio = 37;</code>
       *
       * <pre>
       * TTM市盈率
       * </pre>
       */
      public boolean hasTtmPeratio() {
        return ((bitField1_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional float ttmPeratio = 37;</code>
       *
       * <pre>
       * TTM市盈率
       * </pre>
       */
      public float getTtmPeratio() {
        return ttmPeratio_;
      }
      /**
       * <code>optional float ttmPeratio = 37;</code>
       *
       * <pre>
       * TTM市盈率
       * </pre>
       */
      public Builder setTtmPeratio(float value) {
        bitField1_ |= 0x00000010;
        ttmPeratio_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float ttmPeratio = 37;</code>
       *
       * <pre>
       * TTM市盈率
       * </pre>
       */
      public Builder clearTtmPeratio() {
        bitField1_ = (bitField1_ & ~0x00000010);
        ttmPeratio_ = 0F;
        onChanged();
        return this;
      }

      private double netFundsFlow_ ;
      /**
       * <code>optional double netFundsFlow = 38;</code>
       *
       * <pre>
       *主力资金净流入
       * </pre>
       */
      public boolean hasNetFundsFlow() {
        return ((bitField1_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional double netFundsFlow = 38;</code>
       *
       * <pre>
       *主力资金净流入
       * </pre>
       */
      public double getNetFundsFlow() {
        return netFundsFlow_;
      }
      /**
       * <code>optional double netFundsFlow = 38;</code>
       *
       * <pre>
       *主力资金净流入
       * </pre>
       */
      public Builder setNetFundsFlow(double value) {
        bitField1_ |= 0x00000020;
        netFundsFlow_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional double netFundsFlow = 38;</code>
       *
       * <pre>
       *主力资金净流入
       * </pre>
       */
      public Builder clearNetFundsFlow() {
        bitField1_ = (bitField1_ & ~0x00000020);
        netFundsFlow_ = 0D;
        onChanged();
        return this;
      }

      private float perShareEarn_ ;
      /**
       * <code>optional float perShareEarn = 39;</code>
       *
       * <pre>
       *每股收益
       * </pre>
       */
      public boolean hasPerShareEarn() {
        return ((bitField1_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>optional float perShareEarn = 39;</code>
       *
       * <pre>
       *每股收益
       * </pre>
       */
      public float getPerShareEarn() {
        return perShareEarn_;
      }
      /**
       * <code>optional float perShareEarn = 39;</code>
       *
       * <pre>
       *每股收益
       * </pre>
       */
      public Builder setPerShareEarn(float value) {
        bitField1_ |= 0x00000040;
        perShareEarn_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float perShareEarn = 39;</code>
       *
       * <pre>
       *每股收益
       * </pre>
       */
      public Builder clearPerShareEarn() {
        bitField1_ = (bitField1_ & ~0x00000040);
        perShareEarn_ = 0F;
        onChanged();
        return this;
      }

      private float netAssetsPerShare_ ;
      /**
       * <code>optional float netAssetsPerShare = 40;</code>
       *
       * <pre>
       *每股净资产
       * </pre>
       */
      public boolean hasNetAssetsPerShare() {
        return ((bitField1_ & 0x00000080) == 0x00000080);
      }
      /**
       * <code>optional float netAssetsPerShare = 40;</code>
       *
       * <pre>
       *每股净资产
       * </pre>
       */
      public float getNetAssetsPerShare() {
        return netAssetsPerShare_;
      }
      /**
       * <code>optional float netAssetsPerShare = 40;</code>
       *
       * <pre>
       *每股净资产
       * </pre>
       */
      public Builder setNetAssetsPerShare(float value) {
        bitField1_ |= 0x00000080;
        netAssetsPerShare_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float netAssetsPerShare = 40;</code>
       *
       * <pre>
       *每股净资产
       * </pre>
       */
      public Builder clearNetAssetsPerShare() {
        bitField1_ = (bitField1_ & ~0x00000080);
        netAssetsPerShare_ = 0F;
        onChanged();
        return this;
      }

      private long totalShareCapital_ ;
      /**
       * <code>optional int64 totalShareCapital = 41;</code>
       *
       * <pre>
       *总股本
       * </pre>
       */
      public boolean hasTotalShareCapital() {
        return ((bitField1_ & 0x00000100) == 0x00000100);
      }
      /**
       * <code>optional int64 totalShareCapital = 41;</code>
       *
       * <pre>
       *总股本
       * </pre>
       */
      public long getTotalShareCapital() {
        return totalShareCapital_;
      }
      /**
       * <code>optional int64 totalShareCapital = 41;</code>
       *
       * <pre>
       *总股本
       * </pre>
       */
      public Builder setTotalShareCapital(long value) {
        bitField1_ |= 0x00000100;
        totalShareCapital_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int64 totalShareCapital = 41;</code>
       *
       * <pre>
       *总股本
       * </pre>
       */
      public Builder clearTotalShareCapital() {
        bitField1_ = (bitField1_ & ~0x00000100);
        totalShareCapital_ = 0L;
        onChanged();
        return this;
      }

      private long circulatingCapital_ ;
      /**
       * <code>optional int64 circulatingCapital = 42;</code>
       *
       * <pre>
       *流通股本
       * </pre>
       */
      public boolean hasCirculatingCapital() {
        return ((bitField1_ & 0x00000200) == 0x00000200);
      }
      /**
       * <code>optional int64 circulatingCapital = 42;</code>
       *
       * <pre>
       *流通股本
       * </pre>
       */
      public long getCirculatingCapital() {
        return circulatingCapital_;
      }
      /**
       * <code>optional int64 circulatingCapital = 42;</code>
       *
       * <pre>
       *流通股本
       * </pre>
       */
      public Builder setCirculatingCapital(long value) {
        bitField1_ |= 0x00000200;
        circulatingCapital_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int64 circulatingCapital = 42;</code>
       *
       * <pre>
       *流通股本
       * </pre>
       */
      public Builder clearCirculatingCapital() {
        bitField1_ = (bitField1_ & ~0x00000200);
        circulatingCapital_ = 0L;
        onChanged();
        return this;
      }

      private long scanTime_ ;
      /**
       * <code>optional int64 scanTime = 43;</code>
       *
       * <pre>
       *扫描时间 
       * </pre>
       */
      public boolean hasScanTime() {
        return ((bitField1_ & 0x00000400) == 0x00000400);
      }
      /**
       * <code>optional int64 scanTime = 43;</code>
       *
       * <pre>
       *扫描时间 
       * </pre>
       */
      public long getScanTime() {
        return scanTime_;
      }
      /**
       * <code>optional int64 scanTime = 43;</code>
       *
       * <pre>
       *扫描时间 
       * </pre>
       */
      public Builder setScanTime(long value) {
        bitField1_ |= 0x00000400;
        scanTime_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int64 scanTime = 43;</code>
       *
       * <pre>
       *扫描时间 
       * </pre>
       */
      public Builder clearScanTime() {
        bitField1_ = (bitField1_ & ~0x00000400);
        scanTime_ = 0L;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:com.baidu.stock.quote.protocbuf.SnapShot)
    }

    static {
      defaultInstance = new SnapShot(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:com.baidu.stock.quote.protocbuf.SnapShot)
  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_com_baidu_stock_quote_protocbuf_SnapShot_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_baidu_stock_quote_protocbuf_SnapShot_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\016SnapShot.proto\022\037com.baidu.stock.quote." +
      "protocbuf\032\020StockBasic.proto\032\014BidAsk.prot" +
      "o\"\250\007\n\010SnapShot\022\014\n\004date\030\001 \002(\t\022\014\n\004time\030\002 \002" +
      "(\t\022?\n\nstockBasic\030\003 \002(\0132+.com.baidu.stock" +
      ".quote.protocbuf.StockBasic\022\020\n\010preClose\030" +
      "\004 \001(\002\022\014\n\004high\030\005 \001(\002\022\014\n\004open\030\006 \001(\002\022\013\n\003low" +
      "\030\007 \001(\002\022\r\n\005close\030\010 \001(\002\022\016\n\006volume\030\t \001(\003\022\016\n" +
      "\006amount\030\n \001(\001\022\021\n\tnetChange\030\013 \001(\002\022\026\n\016netC" +
      "hangeRatio\030\014 \001(\002\022\017\n\007limitUp\030\r \001(\002\022\021\n\tlim" +
      "itDown\030\016 \001(\002\0224\n\003bid\030\017 \003(\0132\'.com.baidu.st",
      "ock.quote.protocbuf.BidAsk\0224\n\003ask\030\020 \003(\0132" +
      "\'.com.baidu.stock.quote.protocbuf.BidAsk" +
      "\022\026\n\016amplitudeRatio\030\021 \001(\002\022\025\n\rturnoverRati" +
      "o\030\022 \001(\002\022\025\n\rcurrencyValue\030\023 \001(\001\022\026\n\016capita" +
      "lization\030\024 \001(\001\022\021\n\tdealCount\030\025 \001(\005\022\023\n\013vol" +
      "umeRatio\030\026 \001(\002\022\022\n\nweibiRatio\030\027 \001(\002\022\017\n\007bv" +
      "Ratio\030\030 \001(\002\022\017\n\007psRatio\030\031 \001(\002\022\016\n\006nowVol\030\032" +
      " \001(\003\022\016\n\006inside\030\033 \001(\005\022\017\n\007outside\030\034 \001(\005\022\013\n" +
      "\003ccl\030\035 \001(\005\022\017\n\007riseNum\030\036 \001(\005\022\017\n\007fairNum\030\037" +
      " \001(\005\022\017\n\007fallNum\030  \001(\005\022\020\n\010weekHigh\030! \001(\002\022",
      "\017\n\007weekLow\030\" \001(\002\022\022\n\nlyrPeratio\030# \001(\002\022\022\n\n" +
      "mrqPeratio\030$ \001(\002\022\022\n\nttmPeratio\030% \001(\002\022\024\n\014" +
      "netFundsFlow\030& \001(\001\022\024\n\014perShareEarn\030\' \001(\002" +
      "\022\031\n\021netAssetsPerShare\030( \001(\002\022\031\n\021totalShar" +
      "eCapital\030) \001(\003\022\032\n\022circulatingCapital\030* \001" +
      "(\003\022\020\n\010scanTime\030+ \001(\003B0\n\037com.baidu.stock." +
      "quote.protocbufB\rSnapShotProto"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
        new com.google.protobuf.Descriptors.FileDescriptor.    InternalDescriptorAssigner() {
          public com.google.protobuf.ExtensionRegistry assignDescriptors(
              com.google.protobuf.Descriptors.FileDescriptor root) {
            descriptor = root;
            return null;
          }
        };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          com.baidu.stock.quote.protocbuf.StockBasicProto.getDescriptor(),
          com.baidu.stock.quote.protocbuf.BidAskProto.getDescriptor(),
        }, assigner);
    internal_static_com_baidu_stock_quote_protocbuf_SnapShot_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_com_baidu_stock_quote_protocbuf_SnapShot_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_com_baidu_stock_quote_protocbuf_SnapShot_descriptor,
        new java.lang.String[] { "Date", "Time", "StockBasic", "PreClose", "High", "Open", "Low", "Close", "Volume", "Amount", "NetChange", "NetChangeRatio", "LimitUp", "LimitDown", "Bid", "Ask", "AmplitudeRatio", "TurnoverRatio", "CurrencyValue", "Capitalization", "DealCount", "VolumeRatio", "WeibiRatio", "BvRatio", "PsRatio", "NowVol", "Inside", "Outside", "Ccl", "RiseNum", "FairNum", "FallNum", "WeekHigh", "WeekLow", "LyrPeratio", "MrqPeratio", "TtmPeratio", "NetFundsFlow", "PerShareEarn", "NetAssetsPerShare", "TotalShareCapital", "CirculatingCapital", "ScanTime", });
    com.baidu.stock.quote.protocbuf.StockBasicProto.getDescriptor();
    com.baidu.stock.quote.protocbuf.BidAskProto.getDescriptor();
  }

  // @@protoc_insertion_point(outer_class_scope)
}
